### YamlMime:PowershellCmdlet
summary: |-
  Gets the default password policy for an Active Directory domain.
module: ActiveDirectory
notes: |-
  * This cmdlet does not work with AD LDS.

    This cmdlet does not work when targeting a snapshot using the Server parameter.
inputs:
- name: <xref href="Microsoft.ActiveDirectory.Management.ADDomain" data-throw-if-not-resolved="False" />
  description: |-
    A domain object is received by the Identity parameter.
outputs:
- name: <xref href="Microsoft.ActiveDirectory.Management.ADDefaultDomainPasswordPolicy" data-throw-if-not-resolved="False" />
  description: |-
    Returns the default domain password policy object for the specified domain.
links:
- text: Get-ADDomain
  href: ./Get-ADDomain.yml
syntaxes:
- >-
  Get-ADDefaultDomainPasswordPolicy [-AuthType <ADAuthType>] [-Credential <PSCredential>]

   [[-Current] <ADCurrentDomainType>] [-Server <String>] [<CommonParameters>]
- >-
  Get-ADDefaultDomainPasswordPolicy [-AuthType <ADAuthType>] [-Credential <PSCredential>]

   [-Identity] <ADDefaultDomainPasswordPolicy> [-Server <String>] [<CommonParameters>]
examples:
- title: '-------------------------- EXAMPLE 1 --------------------------'
  code: |-
    C:\PS>Get-ADDefaultDomainPasswordPolicy -Current LoggedOnUser
  description: |-
    Description

    -----------

    Get the default domain password policy from current logged on user domain.
  summary: ""
- title: '-------------------------- EXAMPLE 2 --------------------------'
  code: |-
    C:\PS>Get-ADDefaultDomainPasswordPolicy -Current LocalComputer
  description: |-
    Description

    -----------

    Get the default domain password policy from current local computer.
  summary: ""
- title: '-------------------------- EXAMPLE 3 --------------------------'
  code: |-
    C:\PS>Get-ADDefaultDomainPasswordPolicy -Identity fabrikam.com
  description: |-
    Description

    -----------

    Get the default domain password policy from a given domain.
  summary: ""
- title: '-------------------------- EXAMPLE 4 --------------------------'
  code: |-
    C:\PS>(Get-ADForest -Current LoggedOnUser).Domains | %{ Get-ADDefaultDomainPasswordPolicy -Identity $_ }
  description: |-
    Description

    -----------

    Get the default domain password policy objects from all the domains in the forest.
  summary: ""
- title: '-------------------------- EXAMPLE 5 --------------------------'
  code: |-
    C:\PS>Get-ADDefaultDomainPasswordPolicy
  description: |-
    Description

    -----------

    Get the default domain password policy from current logged on user domain.
  summary: ""
parameters:
- type: <xref href="ADAuthType" data-throw-if-not-resolved="False" />
  name: AuthType
  description: |+
    Specifies the authentication method to use.
    Possible values for this parameter include:

    Negotiate or 0

    Basic or 1

    The default authentication method is Negotiate.

    A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

    The following example shows how to set this parameter to Basic.

    -AuthType Basic

  defaultValue: Microsoft.ActiveDirectory.Management.AuthType.Negotiate
  position: Named
  aliases: ""
  parameterValueGroup: Negotiate, Basic
- type: <xref href="PSCredential" data-throw-if-not-resolved="False" />
  name: Credential
  description: |+
    Specifies the user account credentials to use to perform this task.
    The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive.
    If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

    To specify this parameter, you can type a user name, such as "User1" or "Domain01\User01" or you can specify a PSCredential object.
    If you specify a user name for this parameter, the cmdlet prompts for a password.

    You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet.
    You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.

    $AdminCredentials = Get-Credential "Domain01\User01"

    The following shows how to set the Credential parameter to these credentials.

    -Credential $AdminCredentials

    If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="ADCurrentDomainType" data-throw-if-not-resolved="False" />
  name: Current
  description: |+
    Specifies whether to return the domain of the local computer or the current logged on user (CLU).
    Possible values for this parameter are:

    LocalComputer or 0

    LoggedOnUser  or 1

    The following example shows how to set this parameter to return the domain of the current logged on user.

    -Current LoggedOnUser

  defaultValue: None
  position: "1"
  aliases: ""
  parameterValueGroup: LocalComputer, LoggedOnUser
- type: <xref href="ADDefaultDomainPasswordPolicy" data-throw-if-not-resolved="False" />
  name: Identity
  isRequired: true
  description: |+
    Specifies an Active Directory domain object by providing one of the following property values.
    The identifier in parentheses is the LDAP display name for the attribute.
    All values are for the domainDNS object that represents the domain.

    Distinguished Name

    Example: DC=redmond,DC=corp,DC=contoso,DC=com

    GUID (objectGUID)

    Example: 599c3d2e-f72d-4d20-8a88-030d99495f20

    Security Identifier (objectSid)

    Example: S-1-5-21-3165297888-301567370-

    DNS domain name

    Example: redmond.corp.contoso.com

    NetBIOS domain name

    Example: redmond

    The cmdlet searches the default naming context or partition to find the object.
    If two or more objects are found, the cmdlet returns a non-terminating error.

    This parameter can also get this object through the pipeline or you can set this parameter to a domain object instance.

    This example shows how to set the parameter to a distinguished name.

    -Identity  "DC=redmond,DC=corp,DC=contoso,DC=com"

    This example shows how to set this parameter to a domain object instance named "domainInstance".

    -Identity   $domainInstance

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: Server
  description: |+
    Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server.
    The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.

    Domain name values:

    Fully qualified domain name

    Examples: corp.contoso.com

    NetBIOS name

    Example: CORP

    Directory server values:

    Fully qualified directory server name

    Example: corp-DC12.corp.contoso.com

    NetBIOS name

    Example: corp-DC12

    Fully qualified directory server name and port

    Example: corp-DC12.corp.contoso.com:3268

    The default value for the Server parameter is determined by one of the following methods in the order that they are listed:

    -By using Server value from objects passed through the pipeline.

    -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.

    -By using the domain of the computer running Windows PowerShell.

    The following example shows how to specify a full qualified domain name as the parameter value.

    -Server "corp.contoso.com"

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
uid: ActiveDirectory.Get-ADDefaultDomainPasswordPolicy
name: Get-ADDefaultDomainPasswordPolicy
description: |-
  The Get-ADDefaultDomainPasswordPolicy cmdlet gets the default password policy for a domain.

  The Identity parameter specifies the Active Directory domain.
  You can identify a domain by its Distinguished Name (DN), GUID, Security Identifier (SID), DNS domain name, or NETBIOS name.
  You can also set the parameter to a domain object variable, such as $\<localDomainObject\> or pass a domain object through the pipeline to the Identity parameter.
metadata:
  external help file: Microsoft.ActiveDirectory.Management.dll-Help.xml
  Module Name: ActiveDirectory
  online version: https://docs.microsoft.com/powershell/module/activedirectory/get-addefaultdomainpasswordpolicy?view=windowsserver2012-ps&wt.mc_id=ps-gethelp
  schema: 2.0.0
