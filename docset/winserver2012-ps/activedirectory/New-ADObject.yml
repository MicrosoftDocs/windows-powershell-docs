### YamlMime:PowershellCmdlet
summary: |-
  Creates an Active Directory object.
module: ActiveDirectory
notes: |-
  * This cmdlet does not work with an Active Directory Snapshot.

    This cmdlet does not work with a read-only domain controller.
inputs:
- name: <xref href="None or Microsoft.ActiveDirectory.Management.ADObject" data-throw-if-not-resolved="False" />
  description: |-
    An Active Directory object that is a template for the new object is received by the Instance parameter.

    Derived types such as the following are also accepted:

    -Microsoft.ActiveDirectory.Management.ADPartition

    -Microsoft.ActiveDirectory.Management.ADFineGrainedPasswordPolicy

    -Microsoft.ActiveDirectory.Management.ADGroup

    -Microsoft.ActiveDirectory.Management.ADUser

    -Microsoft.ActiveDirectory.Management.ADComputer
outputs:
- name: <xref href="None or Microsoft.ActiveDirectory.Management.ADObject" data-throw-if-not-resolved="False" />
  description: |-
    Returns the new Active Directory object when the PassThru parameter is specified.
    By default, this cmdlet does not generate any output.
links:
- text: Get-ADObject
  href: ./Get-ADObject.yml
- text: Move-ADObject
  href: ./Move-ADObject.yml
- text: Remove-ADObject
  href: ./Remove-ADObject.yml
- text: Rename-ADObject
  href: ./Rename-ADObject.yml
- text: Restore-ADObject
  href: ./Restore-ADObject.yml
- text: Set-ADObject
  href: ./Set-ADObject.yml
syntaxes:
- >-
  New-ADObject [-WhatIf] [-Confirm] [-AuthType <ADAuthType>] [-Credential <PSCredential>] [-Description <String>]

   [-DisplayName <String>] [-Instance <ADObject>] [-Name] <String> [-OtherAttributes <Hashtable>] [-PassThru]

   [-Path <String>] [-ProtectedFromAccidentalDeletion <Boolean>] [-Server <String>] [-Type] <String>

   [<CommonParameters>]
examples:
- title: '-------------------------- EXAMPLE 1 --------------------------'
  code: |-
    C:\PS>New-ADObject -Name '192.168.1.0/26' -Type subnet -Description '192.168.1.0/255.255.255.192' -OtherAttributes @{location="Building A";siteObject="CN=HQ,CN=Sites,CN=Configuration,DC=FABRIKAM,DC=COM"} -Path "CN=Subnets,CN=Sites,CN=Configuration,DC=FABRIKAM,DC=COM"
  description: |-
    Description

    -----------

    Creates a subnet object in the HQ site with the described attributes.
  summary: ""
- title: '-------------------------- EXAMPLE 2 --------------------------'
  code: |-
    C:\PS>$subnetTemplate = get-adobject -Identity "CN=192.168.1.0/26,CN=Subnets,CN=Sites,CN=Configuration,DC=Fabrikam,DC=com" -properties description,location; new-adobject -instance $subnetTemplate -name "192.168.1.0/28" -type subnet -path "CN=Subnets,CN=Sites,CN=Configuration,DC=FABRIKAM,DC=COM"
  description: |-
    Description

    -----------

    Creates a new subnet object, using a different subnet object as a template
  summary: ""
- title: '-------------------------- EXAMPLE 3 --------------------------'
  code: |-
    C:\PS>New-ADObject -name SaraDavisContact -type contact -ProtectedFromAccidentalDeletion $true -OtherAttributes @{'msDS-SourceObjectDN'="CN=FabrikamContacts,DC=CONTOSO,DC=COM"}
  description: |-
    Description

    -----------

    Creates a new contact object, sets the msDS-SourceObjectDN property and protects the object from accidental deletion
  summary: ""
- title: '-------------------------- EXAMPLE 4 --------------------------'
  code: |-
    C:\PS>new-adobject -name Apps -type container -path "DC=AppNC" -server "FABRIKAM-SRV1:60000"
  description: |-
    Description

    -----------

    Creates a new container object named 'Apps' in an LDS instance.
  summary: ""
parameters:
- type: <xref href="ADAuthType" data-throw-if-not-resolved="False" />
  name: AuthType
  description: |+
    Specifies the authentication method to use.
    Possible values for this parameter include:

    Negotiate or 0

    Basic or 1

    The default authentication method is Negotiate.

    A Secure Sockets Layer (SSL) connection is required for the Basic authentication method.

    The following example shows how to set this parameter to Basic.

    -AuthType Basic

  defaultValue: Microsoft.ActiveDirectory.Management.AuthType.Negotiate
  position: Named
  aliases: ""
  parameterValueGroup: Negotiate, Basic
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet.

  defaultValue: "False"
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="PSCredential" data-throw-if-not-resolved="False" />
  name: Credential
  description: |+
    Specifies the user account credentials to use to perform this task.
    The default credentials are the credentials of the currently logged on user unless the cmdlet is run from an Active Directory PowerShell provider drive.
    If the cmdlet is run from such a provider drive, the account associated with the drive is the default.

    To specify this parameter, you can type a user name, such as "User1" or "Domain01\User01" or you can specify a PSCredential object.
    If you specify a user name for this parameter, the cmdlet prompts for a password.

    You can also create a PSCredential object by using a script or by using the Get-Credential cmdlet.
    You can then set the Credential parameter to the PSCredential object The following example shows how to create credentials.

    $AdminCredentials = Get-Credential "Domain01\User01"

    The following shows how to set the Credential parameter to these credentials.

    -Credential $AdminCredentials

    If the acting credentials do not have directory-level permission to perform the task, Active Directory PowerShell returns a terminating error.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: Description
  description: |+
    Specifies a description of the object.
    This parameter sets the value of the Description property for the object.
    The LDAP Display Name (ldapDisplayName) for this property is "description".

    The following example shows how to set this parameter to a sample description.

    -Description "Description of the object"

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: DisplayName
  description: |+
    Specifies the display name of the object.
    This parameter sets the DisplayName property of the object.
    The LDAP Display Name (ldapDisplayName) for this property is "displayName".

    The following example shows how to set this parameter.

    -DisplayName "Sara Davis Laptop"

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="ADObject" data-throw-if-not-resolved="False" />
  name: Instance
  description: |+
    Specifies an instance of an Active Directory object to use as a template for a new Active Directory object.

    You can use an instance of an existing Active Directory object as a template or you can construct a new Active Directory object by using the Windows PowerShell command line or by using a script.
    The following examples show how to use these two methods to create a new Active Directory object.

    Method 1: Use an existing Active Directory object as a template for a new object.
    To retrieve an instance of an existing Active Directory object, use a cmdlet such as Get-ADObject.
    Then provide this object to the Instance parameter of the New-ADObject cmdlet to create a new Active Directory object.
    You can override property values of the new object by setting the appropriate parameters.

    $objectInstance = Get-ADObject -Identity saraDavisDesktop

    New-ADObject -Name "ellenAdamsDesktop"  -Instance $ObjectInstance -Type "computer"

    Method 2: Create a new ADObject and set the property values by using the Windows PowerShell command line interface.
    Then pass this object to the Instance parameter of the New-ADObject cmdlet to create the new Active Directory object.

    $objectInstance = new-object Microsoft.ActiveDirectory.Management.ADObject $objectInstance.Description = "Ellen Adams New Computer" New-ADObject -Name ellenAdamsDesktop  -Instance $ObjectInstance -Type computer

    Note: Specified attributes are not validated, so attempting to set attributes that do not exist or cannot be set will raise an error.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: Name
  isRequired: true
  description: |+
    Specifies the name of the object.
    This parameter sets the Name property of the Active Directory object.
    The LDAP Display Name (ldapDisplayName) of this property is "name".

    The following example shows how to set this parameter to a name string.

    -Name "SaraDavis"

  defaultValue: None
  pipelineInput: true
  position: "1"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="Hashtable" data-throw-if-not-resolved="False" />
  name: OtherAttributes
  description: |+
    Specifies object attribute values for attributes that are not represented by cmdlet parameters.
    You can set one or more parameters at the same time with this parameter.
    If an attribute takes more than one value, you can assign multiple values.
    To identify an attribute, specify the LDAPDisplayName (ldapDisplayName) defined for it in the Active Directory schema.

    Syntax:

    To specify a single value for an attribute:

    -OtherAttributes @{'AttributeLDAPDisplayName'=value}

    To specify multiple values for an attribute

    -OtherAttributes @{'AttributeLDAPDisplayName'=value1,value2,...}

    You can specify values for more than one attribute by using semicolons to separate attributes. 
    The following syntax shows how to set values for multiple attributes:

    -OtherAttributes @{'Attribute1LDAPDisplayName'=value; 'Attribute2LDAPDisplayName'=value1,value2;...}

    The following examples show how to use this parameter.

    To set the value of a custom attribute called favColors that takes a set of Unicode strings, use the following syntax:

    -OtherAttributes @{'favColors'="pink","purple"}

    To set values for favColors and dateOfBirth simultaneously, use the following syntax:

    -OtherAttributes @{'favColors'="pink","purple"; 'dateOfBirth'=" 01/01/1960"}

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: PassThru
  description: |+
    Returns the new or modified object.
    By default (i.e.
    if -PassThru is not specified), this cmdlet does not generate any output.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: Path
  description: |+
    Specifies the X.500 path of the Organizational Unit (OU) or container where the new object is created.

    In many cases, a default value will be used for the Path parameter if no value is specified. 
    The rules for determining the default value are given below. 
    Note that rules listed first are evaluated first and once a default value can be determined, no further rules will be evaluated.

    In AD DS environments, a default value for Path will be set in the following cases:

    - If the cmdlet is run from an Active Directory PowerShell provider drive, the parameter is set to the current path of the provider drive.
    - If the cmdlet has a default path, this will be used.  For example: in New-ADUser, the Path parameter would default to the Users container.
    - If none of the previous cases apply, the default value of Path will be set to the default partition or naming context of the target domain.

    In AD LDS environments, a default value for Path will be set in the following cases:

    - If the cmdlet is run from an Active Directory PowerShell provider drive, the parameter is set to the current path of the provider drive.
    - If the cmdlet has a default path, this will be used.  For example: in New-ADUser, the Path parameter would default to the Users container.
    - If the target AD LDS instance has a default naming context, the default value of Path will be set to the default naming context.  To specify a default naming context for an AD LDS environment, set the msDS-defaultNamingContext property of the Active Directory directory service agent (DSA) object (nTDSDSA) for the AD LDS instance.
    - If none of the previous cases apply, the Path parameter will not take any default value.

    The following example shows how to set this parameter to an OU.

    -Path "ou=mfg,dc=noam,dc=corp,dc=contoso,dc=com"

    Note:  The Active Directory Provider cmdlets, such New-Item, Remove-Item, Remove-ItemProperty, Rename-Item and Set-ItemProperty also contain a Path property.
    However, for the provider cmdlets, the Path parameter identifies the path of the actual object and not the container as with the Active Directory cmdlets.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="Boolean" data-throw-if-not-resolved="False" />
  name: ProtectedFromAccidentalDeletion
  description: |+
    Specifies whether to prevent the object from being deleted.
    When this property is set to true, you cannot delete the corresponding object without changing the value of the property.
    Possible values for this parameter include:

    $false or 0

    $true or 1

    The following example shows how to set this parameter to true.

    -ProtectedFromAccidentalDeletion $true

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: Server
  description: |+
    Specifies the Active Directory Domain Services instance to connect to, by providing one of the following values for a corresponding domain name or directory server.
    The service may be any of the following:  Active Directory Lightweight Domain Services, Active Directory Domain Services or Active Directory Snapshot instance.

    Domain name values:

    Fully qualified domain name

    Examples: corp.contoso.com

    NetBIOS name

    Example: CORP

    Directory server values:

    Fully qualified directory server name

    Example: corp-DC12.corp.contoso.com

    NetBIOS name

    Example: corp-DC12

    Fully qualified directory server name and port

    Example: corp-DC12.corp.contoso.com:3268

    The default value for the Server parameter is determined by one of the following methods in the order that they are listed:

    -By using Server value from objects passed through the pipeline.

    -By using the server information associated with the Active Directory PowerShell provider drive, when running under that drive.

    -By using the domain of the computer running Powershell.

    The following example shows how to specify a full qualified domain name as the parameter value.

    -Server "corp.contoso.com"

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: Type
  isRequired: true
  description: |+
    Specifies the type of object to create.
    Set the Type parameter to the LDAP display name of the Active Directory Schema Class that represents the type of object that you want to create.
    Examples of type values include user, computer, and group.

    The following example shows how to use this parameter to create a new Active Directory group object.

    -Type "group"

  defaultValue: None
  pipelineInput: true
  position: "2"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the cmdlet runs.
    The cmdlet is not run.

  defaultValue: "False"
  position: Named
  aliases: wi
  parameterValueGroup: ""
uid: ActiveDirectory.New-ADObject
name: New-ADObject
description: |-
  The New-ADObject cmdlet creates a new Active Directory object such as a new organizational unit or new user account.
  You can use this cmdlet to create any type of Active Directory object.
  Many object properties are defined by setting cmdlet parameters.
  Properties that are not set by cmdlet parameters can be set by using the OtherAttributes parameter.

  You must set the Name and Type parameters to create a new Active Directory object.
  The Name specifies the name of the new object.
  The Type parameter specifies the LDAP display name of the Active Directory Schema Class that represents the type of object you want to create.
  Examples of Type values include computer, group, organizational unit, and user.

  The Path parameter specifies the container where the object will be created..
  When you do not specify the Path parameter, the cmdlet creates an object in the default naming context container for Active Directory objects in the domain.

  The following methods explain different ways to create an object by using this cmdlet.

  Method 1: Use the New-ADObject cmdlet, specify the required parameters, and set any additional property values by using the cmdlet parameters.

  Method 2: Use a template to create the new object.
  To do this, create a new Active Directory object or retrieve a copy of an existing Active Directory object and set the Instance parameter to this object.
  The object provided to the Instance parameter is used as a template for the new object.
  You can override property values from the template by setting cmdlet parameters.
  For examples and more information, see the Instance parameter description for this cmdlet.
  For information about Active Directory cmdlets use the Instance parameter, see about_ActiveDirectory_Instance.

  Method 3: Use the Import-CSV cmdlet with the New-ADObject cmdlet to create multiple Active Directory objects.
  To do this, use the Import-CSV cmdlet to create the custom objects from a comma-separated value (CSV) file that contains a list of object properties.
  Then pass these objects through the pipeline to the New-ADObject cmdlet to create the Active Directory objects.
metadata:
  external help file: Microsoft.ActiveDirectory.Management.dll-Help.xml
  Module Name: ActiveDirectory
  online version: https://docs.microsoft.com/powershell/module/activedirectory/new-adobject?view=windowsserver2012-ps&wt.mc_id=ps-gethelp
  schema: 2.0.0
