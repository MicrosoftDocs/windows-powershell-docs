### YamlMime:PowershellCmdlet
summary: |-
  Exports a certificate or a PFXData object to a Personal Information Exchange (PFX) file.
module: pki
notes: ""
inputs:
- name: <xref href="System.Security.Cryptography.X509Certificates.X509Certificate2" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  description: |-
    The X509Certificate2\[\] object is an array of certificate objects.
outputs:
- name: <xref href="System.IO.FileInfo" data-throw-if-not-resolved="False" />
  description: |-
    The FileInfo object contains the information about the PFX file.
links:
- text: ConvertTo-SecureString
  href: https://go.microsoft.com/fwlink/?LinkId=113291
- text: Get-ChildItem
  href: https://go.microsoft.com/fwlink/?LinkId=204557
- text: Get-PfxData
  href: ./Get-PfxData.yml
- text: Import-PfxCertificate
  href: ./Import-PfxCertificate.yml
syntaxes:
- >-
  Export-PfxCertificate [-NoProperties] [-NoClobber] [-Force] [-ChainOption <ExportChainOption>]

   [-ProtectTo <String[]>] [-Password <SecureString>] [-FilePath] <String> [-PFXData] <PfxData> [-WhatIf]

   [-Confirm] [<CommonParameters>]
- >-
  Export-PfxCertificate [-NoProperties] [-NoClobber] [-Force] [-ChainOption <ExportChainOption>]

   [-ProtectTo <String[]>] [-Password <SecureString>] [-FilePath] <String> [-Cert] <Certificate> [-WhatIf]

   [-Confirm] [<CommonParameters>]
examples:
- title: EXAMPLE 1
  code: |-
    PS C:\>$mypwd = ConvertTo-SecureString -String "1234" -Force -AsPlainText



    PS C:\>Get-ChildItem -Path cert:\localMachine\my\5F98EBBFE735CDDAE00E33E0FD69050EF9220254 | Export-PfxCertificate -FilePath C:\mypfx.pfx -Password $mypwd
  description: |-
    This example exports a certificate from the local machine store to a PFX file which includes the entire chain and all external properties.
  summary: ""
- title: EXAMPLE 2
  code: |-
    PS C:\>$mypwd = ConvertTo-SecureString -String "1234" -Force -AsPlainText



    PS C:\>Get-ChildItem -Path cert:\LocalMachine\my | Export-PfxCertificate -FilePath C:\mypfx.pfx -Password $mypwd
  description: |-
    This example exports all certificates under the My store for the machine account into one file named mypfx.pfx.
    In order for this cmdlet to succeed, all keys need to be exportable.
  summary: ""
- title: EXAMPLE 3
  code: |-
    PS C:\>$mypwd = ConvertTo-SecureString -String "1234" -Force -AsPlainText



    PS C:\>Export-PfxCertificate -Cert cert:\currentuser\my\5F98EBBFE735CDDAE00E33E0FD69050EF9220254 -FilePath c:\myexport.pfx -ChainOption EndEntityCertOnly -NoProperties -Password $mypwd
  description: |-
    This example exports a certificate from the current user store with no chain and no external properties
  summary: ""
- title: EXAMPLE 4
  code: |-
    PS C:\>$a = Get-ChildItem -Path cert:\localMachine\my 
    Export-PfxCertificate -Cert $a[1] -FilePath C:\myexport.pfx -ProtectTo "contoso\billb99, contoso\johnj99"
  description: |-
    This example exports a certificate from the current machine store.
    Both user accounts, contos\billb99 and contos\johnj99, can access this PFX with no password.
    A Windows® 8 DC for key distribution is required.
  summary: ""
- title: EXAMPLE 5
  code: |-
    PS C:\>$a = Get-ChildItem -Path cert:\localMachine\my



    PS C:\>$mypwd = ConvertTo-SecureString -String "1234" -Force -AsPlainText



    PS C:\>Export-PfxCertificate -Cert $a[1] -FilePath C:\myexport.pfx -ProtectTo "contoso\billb99, contoso\johnj99" -Password $mypwd
  description: |-
    This example exports a certificate from the current machine store.
    Both user accounts, johnj99 and billb99, can access this PFX file with no password.
    For everyone else, they need to use 1234 as a password.
    A Windows 8 DC for key distribution is required.
  summary: ""
- title: EXAMPLE 6
  code: |-
    PS C:\>$NewPwd = ConvertTo-SecureString -String "abcd" -Force -AsPlainText



    PS C:\>$mypfx = Get-PfxData -FilePath C:\mypfx.pfx -Password $Oldpwd



    PS C:\>Export-PfxCertificate -PFXData $mypfx -FilePath C:\mypfx2.pfx -Password $NewPwd
  description: |-
    This example changes an existing password for a PFX file from $OldPwd to $NewPwd.
  summary: ""
parameters:
- type: <xref href="Certificate" data-throw-if-not-resolved="False" />
  name: Cert
  isRequired: true
  description: |+
    Specifies the path to the certificate to be exported.

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: PsPath
  parameterValueGroup: ""
- type: <xref href="ExportChainOption" data-throw-if-not-resolved="False" />
  name: ChainOption
  description: |+
    Specifies the options for building a chain when exporting certificates.
    The acceptable values for this parameter are:

     -- BuildChain:  Certificate chain for all end entity certificates will be built and included in the export.
    This option is valid for both **PfxData** and **Cert** parameters.
    In the case of **PfxData** parameter, the collection of all PFX certificates will be used as an additional store. 

     -- EndEntityCertOnly: Only end entity certificates are exported without any chain.
    This option is valid for both the **PfxData** and the **Cert** parameters. 

     -- PfxDataOnly: Certificates contained in PFXData objects will be exported with no chain building.
    This option is only valid when the **PfxData** parameter is used.

  defaultValue: BuildChain
  position: Named
  aliases: ""
  parameterValueGroup: BuildChain, EndEntityCertOnly, PfxDataOnly
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet.

  defaultValue: "False"
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: FilePath
  isRequired: true
  description: |+
    Specifies the path for the PFX file to be exported.

  defaultValue: None
  position: "1"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: Force
  description: |+
    Specifies that the provided PFX file should be overwritten, even if the Read-only attribute is set on the file.
    By default, this cmdlet overwrites existing PFX files without warning, unless the Read-only or hidden attribute is set or the **NoClobber** parameter is used in the cmdlet.

  defaultValue: "False"
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: NoClobber
  description: |+
    Specifies that if the PFX file already exists, it should not be over written.
    This parameter takes precedence over the **Force** parameter, which permits this cmdlet to overwrite a PFX file even if it has the Read-only attribute set.

  defaultValue: "False"
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: NoProperties
  description: |+
    Specifies whether the extended properties for a certificate are exported.
    If this parameter is specified, then extended properties are not included with the export.
    By default, all extended properties are included in the exported file.

  defaultValue: "False"
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SecureString" data-throw-if-not-resolved="False" />
  name: Password
  description: |+
    Specifies the password used to protect the exported PFX file.
    The password should be in the form of secure string.
    Either the **ProtectTo** or this parameter must be specified, or an error will be displayed.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="PfxData" data-throw-if-not-resolved="False" />
  name: PFXData
  isRequired: true
  description: |+
    Specifies a PFXData object that contains one or more certificates from a PFX file.

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: ProtectTo
  description: |+
    Specifies an array of strings for the username or group name that can access the private key of PFX file without any password.
    This requires a Windows Server® 2012 domain controller.
    Either the **Password** or this parameter must be specified, or an error will be displayed.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the cmdlet runs.
    The cmdlet is not run.

  defaultValue: "False"
  position: Named
  aliases: wi
  parameterValueGroup: ""
uid: pki.Export-PfxCertificate
name: Export-PfxCertificate
description: |-
  The **Export-PfxCertificate** cmdlet exports a certificate or a PFXData object to a Personal Information Exchange (PFX) file.
  By default, extended properties and the entire chain are exported.

  Delegation may be required when using this cmdlet with Windows PowerShell® remoting and changing user configuration.
metadata:
  external help file: Microsoft.CertificateServices.PKIClient.Cmdlets.dll-Help.xml
  Module Name: pki
  online version: https://docs.microsoft.com/powershell/module/pki/export-pfxcertificate?view=windowsserver2012-ps&wt.mc_id=ps-gethelp
  schema: 2.0.0
