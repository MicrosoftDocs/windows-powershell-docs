### YamlMime:PowershellCmdlet
summary: |-
  Adds a signed app package (.appx) to a user account.
module: AppX
notes: ""
inputs:
- name: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  description: ""
- name: <xref href="System.IO.FileInfo" data-throw-if-not-resolved="False" />
  description: ""
outputs:
- name: <xref href="None" data-throw-if-not-resolved="False" />
  description: ""
links:
- text: Package Manager API
  href: https://go.microsoft.com/fwlink/?LinkId=245447
- text: How to Add and Remove Apps
  href: https://go.microsoft.com/fwlink/?LinkID=231020
- text: Get-AppxPackage
  href: ./Get-AppxPackage.yml
- text: Get-AppxPackageManifest
  href: ./Get-AppxPackageManifest.yml
- text: Remove-AppxPackage
  href: ./Remove-AppxPackage.yml
- text: Get-AppxLog
  href: ./Get-AppxLog.yml
- text: Get-AppxLastError
  href: ./Get-AppxLastError.yml
syntaxes:
- >-
  Add-AppxPackage [-Path] <String> [-DependencyPath <String[]>] [-ForceApplicationShutdown]

   [-InstallAllResources] [-WhatIf] [-Confirm] [<CommonParameters>]
- >-
  Add-AppxPackage [-Path] <String> [-DependencyPath <String[]>] [-Register] [-DisableDevelopmentMode]

   [-ForceApplicationShutdown] [-InstallAllResources] [-WhatIf] [-Confirm] [<CommonParameters>]
- >-
  Add-AppxPackage [-Path] <String> [-DependencyPath <String[]>] [-ForceApplicationShutdown]

   [-InstallAllResources] [-Update] [-WhatIf] [-Confirm] [<CommonParameters>]
- >-
  Add-AppxPackage [-Register] -MainPackage <String> [-DependencyPackages <String[]>] [-InstallAllResources]

   [-WhatIf] [-Confirm] [<CommonParameters>]
examples:
- title: Example 1
  code: |-
    PS C:\>Add-AppxPackage -Path C:\Users\user1\Desktop\MyApp.appx -DependencyPath C:\Users\user1\Desktop\winjs.appx
  description: |-
    This command adds an app package (.appx) that the package contains.
  summary: ""
- title: Example 2
  code: |-
    PS C:\>$manifestpath = (get-appxpackage -Name "*WindowsCalculator*").InstallLocation + "\Appxmanifest.xml"
    PS C:\> Add-AppxPackage -register $manifestpath -DisableDevelopmentMode
  description: |-
    This command gets the full path of the package manifest file of an installed Windows Store app, and then registers that package.
    You can use -*DisableDevelopmentMode* to register an application that is staged by the StagePackageAsync API, has been disabled, or has become corrupted during testing.
  summary: ""
parameters:
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet.

  defaultValue: "False"
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: DependencyPackages
  description: |+
    Specifies the dependency package full name or dependency package bundle full name to be registered.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: DependencyPath
  description: |+
    Specifies the file path of a dependency package that's required for the installation of the app package (.appx or .appxbundle).
    You can specify the paths to more than one dependency package.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: DisableDevelopmentMode
  description: |+
    Registers an existing app package (.appx or .appxbundle) installation that has been disabled, didn't register, or has become corrupted.
    Use *DisableDevelopmentMode* to specify that the manifest is from an existing installation and not from a collection of files in development mode.
    You can also use this parameter to register an application that the Package Manager APIhttp://go.microsoft.com/fwlink/?LinkId=245447 has staged.
    Use the *-Register* parameter to specify the location of the app package manifest .xml file from the installation location.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: ForceApplicationShutdown
  description: |+
    Forces all active processes that are associated with the package or its dependencies to shut down.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: InstallAllResources
  description: |+
    Forces the deployment of all resource packages specified from a bundle argument.
    This overrides the resource applicability check of the deployment engine and forces staging of all resource packages, registration of all resource packages, or staging and registration of all resource packages.
    This flag can only be used when specifying a resource bundle or resource bundle manifest.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: MainPackage
  isRequired: true
  description: |+
    Specifies the main package full name or bundle full name to be registered.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: Path
  isRequired: true
  description: |+
    Specifies the file path of the app package (.appx or .appxbundle).

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: PSPath
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: Register
  isRequired: true
  description: |+
    Registers an application in development mode.
    You can use development mode to install applications from a folder of unpackaged files.
    You can use the *Register* parameter to test your Windows® Store apps before you deploy them as app packages (.appx).
    To register an existing app package (.appx) installation, you must specify the *DisableDevelopmentMode* parameter along with -*Register*.
    In order to specify dependency packages, specify the *DependencyPath* parameter and the *DisableDevelopmentMode* parameter.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: Update
  isRequired: true
  description: |+
    Specifies that the package being added is a dependency package update.
    A dependency package is removed from the user account when the parent app is removed.
    If you do not use -*Update*, the package being added will be flagged as a primary package and will not be removed from the user account if the parent app is removed.
    To update an already installed package, the new package must have the same package family name.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the cmdlet runs.
    The cmdlet is not run.

  defaultValue: "False"
  position: Named
  aliases: wi
  parameterValueGroup: ""
uid: AppX.Add-AppxPackage
name: Add-AppxPackage
description: |-
  The **Add-AppxPackage** cmdlet adds a signed app package (.appx) to a user account.
  Use the *DependencyPath* parameter to add all other packages that are required for the installation of the app package.

  You can use the *Register* parameter to install from a folder of unpackaged files during development of Windows® Store apps.

  To update an already installed package, the new package must have the same package family name.
metadata:
  external help file: Microsoft.Windows.Appx.PackageManager.Commands.dll-Help.xml
  Module Name: AppX
  ms.date: 10/29/2017
  online version: https://docs.microsoft.com/powershell/module/appx/add-appxpackage?view=windowsserver2012r2-ps&wt.mc_id=ps-gethelp
  schema: 2.0.0
  title: Add-AppxPackage
