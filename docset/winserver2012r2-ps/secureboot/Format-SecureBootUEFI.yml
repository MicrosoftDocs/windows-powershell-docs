### YamlMime:PowershellCmdlet
summary: |-
  Formats certificates or hashes into a content object that is returned and creates a file that is ready to be signed.
module: SecureBoot
notes: ""
inputs:
- name: <xref href="System.String" data-throw-if-not-resolved="False" />
  description: |-
    The String object represents the UEFI variable name that may be output from the Get-SecureBootUEFI cmdlet.
outputs:
- name: <xref href="Microsoft.SecureBoot.Commands.UEFIFormattedVariable" data-throw-if-not-resolved="False" />
  description: |-
    The UEFIFormattedVariable object contains information about the package that is built up to be set.
    The following members are part of the UEFIFormattedVariable object. 

     -- A string named Name. 

     -- A string named Time. 

     -- A boolean named AppendWrite. 

     -- An array of bytes named Content. 

    The UEFIFormattedVariable object can be used to pipe into the Set-SecureBootUEFIcmdlet.
links:
- text: Confirm-SecureBootUEFI
  href: ./Confirm-SecureBootUEFI.yml
- text: Get-SecureBootPolicy
  href: ./Get-SecureBootPolicy.yml
- text: Get-SecureBootUEFI
  href: ./Get-SecureBootUEFI.yml
- text: Set-SecureBootUEFI
  href: ./Set-SecureBootUEFI.yml
syntaxes:
- >-
  Format-SecureBootUEFI -Name <String> -SignatureOwner <Guid> -CertificateFilePath <String[]> [-FormatWithCert]

   [-SignableFilePath <String>] [-Time <String>] [-AppendWrite] [-ContentFilePath <String>] [<CommonParameters>]
- >-
  Format-SecureBootUEFI -Name <String> -SignatureOwner <Guid> -Hash <String[]> -Algorithm <String>

   [-SignableFilePath <String>] [-Time <String>] [-AppendWrite] [-ContentFilePath <String>] [<CommonParameters>]
- >-
  Format-SecureBootUEFI -Name <String> [-Delete] [-SignableFilePath <String>] [-Time <String>]

   [<CommonParameters>]
examples:
- title: EXAMPLE 1
  code: |-
    PS C:\> Format-SecureBootUefi -Name PK -SignatureOwner 12345678-1234-1234-1234-123456789abc -CertificateFilePath PK.cer -SignableFilePath GeneratedFileToSign.bin -Time 2011-11-01T13:30:00Z | Format-List
    Name        : PK 
    Time        : 2011-11-01T13:30:00Z 
    AppendWrite : False 
    Content     : {232, 102, 87, 60...}
  description: |-
    This example formats the private key in PK.cer being piped into the Set-SecureBootUEFI cmdlet.
  summary: ""
- title: EXAMPLE 2
  code: |-
    PS C:\> Format-SecureBootUEFI -Name DBX -SignatureOwner 12345678-1234-1234-1234-123456789abc -Algorithm SHA256 -Hash 0011223344556677889900112233445566778899001122334455667788990011 -SignableFilePath GeneratedFileToSign.bin -Time 2011-11-01T13:30:00Z -AppendWrite | Format-List
    Name        : dbx 
    Time        : 2011-11-01T13:30:00Z 
    AppendWrite : True 
    Content     : {18, 165, 108, 130...}
  description: |-
    This example formats the hash being appended to the DBX UEFI variable when piped into the Set-SecureBootUEFI cmdlet.
  summary: ""
- title: EXAMPLE 3
  code: |-
    PS C:\> Format-SecureBootUEFI -Name KEK -Delete -SignableFilePath GeneratedFileToSign.bin -Time 2011-11-01T13:30:00Z | Format-List
    Name        : KEK 
    Time        : 2011-11-01T13:30:00Z 
    AppendWrite : False 
    Content     :
  description: |-
    This example formats the KEK UEFI variable being deleted when piped into the Set-SecureBootUEFI cmdlet.
  summary: ""
parameters:
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: Algorithm
  isRequired: true
  description: |+
    Specifies, if this cmdlet is formatting hashes, which algorithm is being used.
    The acceptable values for this parameter are: SHA1, SHA256, SHA384, or SHA512.

  defaultValue: None
  position: Named
  aliases: alg
  parameterValueGroup: sha1, sha256, sha384, sha512
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: AppendWrite
  description: |+
    Indicates that the contents of the current variable is appended instead of overwritten.

  defaultValue: "False"
  position: Named
  aliases: append
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: CertificateFilePath
  isRequired: true
  description: |+
    Specifies a list of one or more files each containing a certificate that is used to generate the content object. 

    If only the name is specified, then the file must be in the current working directory; otherwise the full path of the file must be specified.

  defaultValue: None
  position: Named
  aliases: c
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: ContentFilePath
  description: |+
    Specifies the name of the file that is created and contains the information for the content object that is generated by this cmdlet.

  defaultValue: None
  position: Named
  aliases: f
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: Delete
  isRequired: true
  description: |+
    Indicates that the content object, as well as the appropriate sign-able file, is created that deletes the variable.

  defaultValue: "False"
  position: Named
  aliases: del
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: FormatWithCert
  description: |+
    Indicates whether the certificate will be stored or just the public key.
    If this parameter is set, then the entire certificate is stored in the content object.

  defaultValue: "False"
  position: Named
  aliases: cert
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Hash
  isRequired: true
  description: |+
    Specifies a list of hashes that are used to generate the content.

  defaultValue: None
  position: Named
  aliases: h
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: Name
  isRequired: true
  description: |+
    Specifies the name of the UEFI environment variable.
    The acceptable values for this parameter are: PK, KEK, DB, or DBX.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: n
  parameterValueGroup: PK, KEK, db, dbx
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: SignableFilePath
  description: |+
    Specifies the file that contains the contents of the data that is ready to be signed. 

    If only the name is specified, then the file must be in the current working directory; otherwise the full path of the file must be specified.

  defaultValue: None
  position: Named
  aliases: s
  parameterValueGroup: ""
- type: <xref href="Guid" data-throw-if-not-resolved="False" />
  name: SignatureOwner
  isRequired: true
  description: |+
    Specifies  the GUID of the signature owner.

  defaultValue: None
  position: Named
  aliases: g
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: Time
  description: |+
    Specifies the timestamp that is used in the signature.
    This parameter value should be formatted as follows so that it will be accepted by the DateTime object.
    `"2011-11-01T13:30:00Z"`

  defaultValue: None
  position: Named
  aliases: t
  parameterValueGroup: ""
uid: SecureBoot.Format-SecureBootUEFI
name: Format-SecureBootUEFI
description: |-
  The **Format-SecureBootUEFI** cmdlet receives certificates or hashes as input and formats the input into a content object that is returned.
  This returned object will be used by the Set-SecureBootUEFI cmdlet for actually updating the variable.
  If a signable file is specified, then this cmdlet creates a file with the specified name that needs to be signed.

  This cmdlet will run on both UEFI and BIOS (non-UEFI) computers.
metadata:
  external help file: Microsoft.SecureBoot.Commands.dll-Help.xml
  Module Name: SecureBoot
  ms.date: 10/29/2017
  online version: https://docs.microsoft.com/powershell/module/secureboot/format-securebootuefi?view=windowsserver2012r2-ps&wt.mc_id=ps-gethelp
  schema: 2.0.0
  title: Format-SecureBootUEFI
