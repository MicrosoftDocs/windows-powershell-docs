### YamlMime:PowershellCmdlet
summary: |-
  Sets the Secure Boot-related UEFI variables such as Platform Key, Key Exchange Key, Signature Database and Forbidden Signature Database.
module: SecureBoot
notes: ""
inputs:
- name: <xref href="Microsoft.SecureBoot.Commands.UEFIFormattedVariable" data-throw-if-not-resolved="False" />
  description: |-
    The UEFIFormattedVariable object contains the information for the **Name**, **Time**, **Content**, and **AppendWrite** parameters.
outputs:
- name: <xref href="Microsoft.SecureBoot.Commands.UEFIEnvironmentVariable" data-throw-if-not-resolved="False" />
  description: |-
    The UEFIEnvironmentVariable object contains the following properties: 

     -- Name 

     -- Guid 

     -- Bytes 

     -- Attributes
links:
- text: Confirm-SecureBootUEFI
  href: ./Confirm-SecureBootUEFI.yml
- text: Format-SecureBootUEFI
  href: ./Format-SecureBootUEFI.yml
- text: Get-SecureBootPolicy
  href: ./Get-SecureBootPolicy.yml
- text: Get-SecureBootUEFI
  href: ./Get-SecureBootUEFI.yml
syntaxes:
- >-
  Set-SecureBootUEFI -Name <String> [-ContentFilePath <String>] [-SignedFilePath <String>] -Time <String>

   [-AppendWrite] [-OutputFilePath <String>] [<CommonParameters>]
- >-
  Set-SecureBootUEFI -Name <String> [-Content <Byte[]>] [-SignedFilePath <String>] -Time <String> [-AppendWrite]

   [-OutputFilePath <String>] [<CommonParameters>]
examples:
- title: EXAMPLE 1
  code: |-
    PS C:\> $objectFromFormat = ( Format-SecureBootUEFI -Name DBX -SignatureOwner 12345678-1234-1234-1234-123456789abc -Algorithm SHA256 -Hash 0011223344556677889900112233445566778899001122334455667788990011 -SignableFilePath GeneratedFileToSign.bin -Time 2011-11-01T13:30:00Z -AppendWrite ) 
    PS C:\>.\signtool.exe sign /fd sha256 /p7 .\ /p7co 1.2.840.113549.1.7.1 /p7ce DetachedSignedData /a /f PrivateKey.pfxGeneratedFileToSign.bin
    PS C:\> $objectFromFormat | Set-SecureBootUEFI -SignedFilePath GeneratedFileToSign.bin.p7
    Name       : dbx 
    Bytes      : {161, 89, 192, 165...} 
    Attributes : NON VOLATILE 
                 BOOTSERVICE ACCESS 
                 RUNTIME ACCESS 
                 TIME BASED AUTHENTICATED WRITE ACCESS
  description: |-
    This example sets the information obtained from the Format-SecureBootUEFI cmdlet to the DBX UEFI variable.
    This cmdlet supplies a path to the signed package to be authenticated.
    The file named GeneratedFileToSign.bin is a digest created by the Format-SecureBootUEFI cmdlet that needs to be signed according to the UEFI specification.
    The second command runs the SignTool.exe tool from the current directory to sign the digest.
    The SignTool.exe tool can be downloaded from Windows Software Development Kit (SDK) for Windows 8http://go.microsoft.com/fwlink/p/?LinkId=236500 on MSDN.
  summary: ""
- title: EXAMPLE 2
  code: |-
    PS C:\> Set-SecureBootUEFI -ContentFilePath FormattedVariable.bin -SignedFilePath GeneratedFileToSign.bin.p7
    Name       : dbx 
    Bytes      : {161, 89, 192, 165...} 
    Attributes : NON VOLATILE 
                 BOOTSERVICE ACCESS 
                 RUNTIME ACCESS 
                 TIME BASED AUTHENTICATED WRITE ACCESS
  description: |-
    This example sets the formatted data that was written to file FormattedVariable.bin to the DBX UEFI variable.
    This cmdlet supplies a path to the signed package to be authenticated.
  summary: ""
- title: EXAMPLE 3
  code: |-
    PS C:\> $objectFromFormat = ( Format-SecureBootUEFI -Name DB -SignatureOwner 12345678-1234-1234-1234-123456789abc -Time 2011-11-01T13:30:00Z -CertificateFilePath db.cer -FormatWithCert )
    PS C:\> $objectFromFormat | Set-SecureBootUEFI
    Name       : db 
    Bytes      : {161, 89, 192, 165...} 
    Attributes : NON VOLATILE 
                 BOOTSERVICE ACCESS 
                 RUNTIME ACCESS 
                 TIME BASED AUTHENTICATED WRITE ACCESS
  description: |-
    This example creates formatted data that is not signed and sets the unsigned data into the UEFI variable named db.
  summary: ""
parameters:
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: AppendWrite
  description: |+
    Indicates that the contents of the current variable are appended instead of overwritten.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: append
  parameterValueGroup: ""
- type: <xref href="Byte" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Content
  description: |+
    Specifies the byte contents of the variable being set.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: ContentFilePath
  description: |+
    Specifies the file that contains the contents that is being set to the environment variable. 

    If only the name is specified, then the file must be in the current working directory; otherwise the full path of the file must be specified.

  defaultValue: None
  position: Named
  aliases: f
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: Name
  isRequired: true
  description: |+
    Specifies the name of the UEFI environment variable.
    The acceptable values for this parameter are: PK, KEK, DB, or DBX.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: n
  parameterValueGroup: PK, KEK, db, dbx
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: OutputFilePath
  description: |+
    Specifies the name of the file created that contains the contents of what is set.
    If this parameter is specified, then the content are not actually set, just stored into this file. 

    The file is created in the specified path location.

  defaultValue: None
  position: Named
  aliases: of
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: SignedFilePath
  description: |+
    Specifies the signed data that is paired with the contents that are being set to the environment variable. 

    If only the name is specified, then the file must be in the current working directory; otherwise the full path of the file must be specified.

  defaultValue: None
  position: Named
  aliases: s
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: Time
  isRequired: true
  description: |+
    Specifies the timestamp that is used in the signature.
    This parameter value should be formatted as follows so that it will be accepted by the DateTime object.
    `"2011-11-01T13:30:00Z"`

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: t
  parameterValueGroup: ""
uid: SecureBoot.Set-SecureBootUEFI
name: Set-SecureBootUEFI
description: |-
  The **Set-SecureBootUEFI** cmdlet takes a formatted content object that is created by running the Format-SecureBootUEFI cmdlet and a signed file, combines the twos and attempts to set the package in one of the Secure Boot variables.
  The supported Secure Boot variables include Platform Key (PK), Key Exchange Key (KEK), Signature Database (DB), and Forbidden Signature Database (DBX).

  This cmdlet returns an UEFIEnvironmentVariable object if successful, otherwise displays an error.

  This cmdlet runs on both UEFI and BIOS (non-UEFI) computer.If the computer does not support Secure Boot or is a non-UEFI computer, then this cmdlet returns an error displaying the following: `Cmdlet not supported on this platform.`

  If Windows PowerShellÂ® is not run in administrator mode, then this cmdlet returns an error displaying the following: `Unable to set proper privileges.
  Access was denied.`

  If the signed file supplied to this cmdlet is not valid, then this cmdlet returns an error displaying the following: `Incorrect authentication data.`
metadata:
  external help file: Microsoft.SecureBoot.Commands.dll-Help.xml
  Module Name: SecureBoot
  ms.date: 10/29/2017
  online version: https://docs.microsoft.com/powershell/module/secureboot/set-securebootuefi?view=windowsserver2012r2-ps&wt.mc_id=ps-gethelp
  schema: 2.0.0
  title: Set-SecureBootUEFI
