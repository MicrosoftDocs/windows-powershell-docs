### YamlMime:PowershellCmdlet
summary: |-
  Adds assets and assessments to a specified job.
module: WasPSExt
notes: ""
links:
- text: Windows Assessment Services Technical Reference
  href: https://go.microsoft.com/fwlink/?LinkId=215628
- text: Get-WASAssessment
  href: ./Get-WASAssessment.yml
- text: Get-WASComputer
  href: ./Get-WASComputer.yml
- text: Get-WASImage
  href: ./Get-WASImage.yml
- text: Get-WASJob
  href: ./Get-WASJob.yml
syntaxes:
- Update-WASJob -Assessment <WASAssessment[]> [-Job] <WASJob[]> [<CommonParameters>]
- >-
  Update-WASJob [-Computer] <WASComputer[]> [[-Image] <WASImage>] [-Job] <WASJob[]> [[-UnattendFile] <String>]

   [-CustomImage] [<CommonParameters>]
examples:
- title: 'Example 1:  Add assessments to a job and then run it'
  code: |-
    The first command gets the job and saves it as a variable. 
    PS C:\> $job = Get-WASJob -JobName "Automated Job"

    The second command gets the assessments and saves it as a variable.
    PS C:\> $assessments = Get-WASAssessment -AssessmentName minifilter*

    The third command adds the assessments to the job.
    PS C:\> Update-WASJob -Job $job -Assessment $assessments

    This command runs the job.
    PS C:\> Invoke-WASJob -Job $job
  description: ""
  summary: ""
- title: 'Example 2: Add computers to a job and then run it'
  code: |-
    The first command gets the job and saves it as a variable.
    PS C:\> $job = Get-WASJob -JobName "Automated Job"

    The second command gets the computers and saves the objects as a variable.
    PS C:\> $computers = Get-WASComputer -ComputerName *toast

    The third command tells dep_nextref_was that no image deployment is necessary.
    PS C:\> $job.ApplyImage = $false

    The fourth command adds the computers to the job.
    PS C:\> Update-WASJob -Job $job -Computer $computers

    This command runs the job.
    PS C:\> Invoke-WASJob -Job $job
  description: ""
  summary: ""
- title: 'Example 3: Add computers and images to a job and then run it'
  code: |-
    The first command gets the job and saves it as a variable.
    PS C:\> $job = Get-WASJob -JobName "Automated Job"

    The second command gets the computers and saves the objects as a variable.
    PS C:\> $computers = Get-WASComputer -ComputerName *toast

    The third command gets the image and saves it as a variable.
    PS C:\> $image = Get-WASImage -ImageName *Consumer*

    The fourth command tells dep_nextref_was to deploy the image to the computers.
    PS C:\> $job.ApplyImage = $true

    The fifth command adds the computers, and the image to the job.
    PS C:\> Update-WASJob -Job $job -Computer $computers -Image $image

    This command runs the job.
    PS C:\> Invoke-WASJob -Job $job
  description: ""
  summary: ""
parameters:
- type: <xref href="WASAssessment" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Assessment
  isRequired: true
  description: |+
    Specifies a list of assessments to add the job.
    The assessments that are added use the recommended settings.
    If you create a custom assessment that does not include default assessment settings, the assessment could fail at run time.

    To get a list of available assessments, use the **Get-WASAssessment** cmdlet.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="WASComputer" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Computer
  isRequired: true
  description: |+
    Specifies a list of computer objects to add to the job.
    To get the computer object, use the **Get-WASComputer** cmdlet.

  defaultValue: None
  position: "1"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: CustomImage
  description: |+
    Specifies that a predefined image is applied to the computers being added to the job.
    This means that you use a deployment method other than dep_nextref_was.
    The job holds the computer until the image is deployed to the computers.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="WASImage" data-throw-if-not-resolved="False" />
  name: Image
  description: |+
    Specifies the image object to apply to the computers being added to the job.
    This means that you use dep_nextref_was for deployment.
    To get the image object, use the **Get-WASImage** cmdlet.

  defaultValue: None
  position: "2"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="WASJob" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Job
  isRequired: true
  description: |+
    Specifies the job to update.
    This is a required parameter.
    To get the job object, use the **Get-WASJob** cmdlet.
    The job you update can't be saved to the dep_nextref_was server.

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: UnattendFile
  description: |+
    Specifies the unattended answer file to use when deploying the image to the computer.
    The string is the path to the unattend file stored in the /relax/unattendfiles share on the dep_nextref_was server.

  defaultValue: None
  position: "3"
  aliases: ""
  parameterValueGroup: ""
uid: WasPSExt.Update-WASJob
name: Update-WASJob
description: |-
  The Update-WASJob cmdlet is used to add assessments, computers, and images to the job object in memory.
  After you add assets or assessments, you can invoke the job but you can't save it back to the dep_nextref_was server.

  The **AddAssessment** parameter set adds assessments.
  The **AddAsset** parameter set adds computers, images, and unattended answer files.
  However, you can't combine these two parameter sets on the same command line.

  The **Job** parameter is required, and either the **Assessment** or the **Computer** parameter is also required.
metadata:
  external help file: Microsoft.Assessments.WAS.PowerShell.dll-Help.xml
  Module Name: WasPSExt
  ms.date: 12/05/2017
  online version: https://docs.microsoft.com/powershell/module/waspsext/update-wasjob?view=windowsserver2012r2-ps&wt.mc_id=ps-gethelp
  schema: 2.0.0
  title: Update-WASJob
