### YamlMime:PowershellCmdlet
summary: |-
  Gets a network route or all the routes in a subnet in the Network Controller.
module: NetworkController
notes: ""
outputs:
- name: <xref href=" " data-throw-if-not-resolved="False" />
  description: |-
    This cmdlet returns an object that contains the destination and the next hop for a particular network route.
links:
- text: Install-NetworkController
  href: ./Install-NetworkController.yml
- text: New-NetworkControllerFabricRoute
  href: ./New-NetworkControllerFabricRoute.yml
- text: Remove-NetworkControllerFabricRoute
  href: ./Remove-NetworkControllerFabricRoute.yml
- text: Set-NetworkController
  href: ./Set-NetworkController.yml
syntaxes:
- >-
  Get-NetworkControllerFabricRoute [-LogicalNetworkId] <String[]> [-SubnetId] <String[]>

   [[-ResourceId] <String[]>] -ConnectionUri <Uri> [-CertificateThumbprint <String>] [-Credential <PSCredential>]

   [-PassInnerException] [<CommonParameters>]
examples:
- title: 'Example 1: Display all routes for a subnet'
  code: |-
    PS C:\> Get-NetworkControllerFabricRoute -ConnectionUri "https://networkcontroller" -LogicalNetworkId "Network13" -SubnetId "Subnet01"
  description: |-
    This command retrieves all the routes in the subnet Subnet01.
    That subnet is in a logical network called Network13.
  summary: ""
- title: 'Example 2: Display address and next hop'
  code: |-
    PS C:\> $Route = Get-NetworkControllerFabricRoute -ConnectionUri "https://networkcontroller" -LogicalNetworkId "Network13" -SubnetId "Subnet01" -ResourceId "Route21"
    PS C:\> $Route.Properties
  description: |-
    The first command gets a route that has the ID Route21 in the subnet that has the ID Subnet01.
    That subnet is in the logical network Network13.
    The command stores the route in the $Route variable.

    The second command displays properties of the route stored in $Route.
    Specifically, it shows the destination address and the next hop address.
  summary: ""
parameters:
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: CertificateThumbprint
  description: |+
    Specifies the certificate thumbprint of a digital public key X.509 certificate of a user account that has permission to perform this action.
    In order for Network Controller to authorize the account, specify this thumbprint by using the *ClientCertificateThumbprint* parameter of the **Install-NetworkController** or **Set-NetworkController** cmdlet.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="Uri" data-throw-if-not-resolved="False" />
  name: ConnectionUri
  isRequired: true
  description: |+
    Specifies the Uniform Resource Identifier (URI) of the Network Controller.
    All Representational State Transfer (REST) clients use this URI to connect to Network Controller.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="PSCredential" data-throw-if-not-resolved="False" />
  name: Credential
  description: |+
    Specifies a user credential that has permission to perform this action.
    The default value is the current user.
    This user must be present in the security group specified in the *ClientSecurityGroup* parameter in the **Install-NetworkController** cmdlet.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: LogicalNetworkId
  isRequired: true
  description: |+
    Specifies an array of IDs of logical networks from which this cmdlet gets routes.

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: PassInnerException
  description: ""
  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: ResourceId
  description: |+
    Specifies the resource ID of the route that this cmdlet gets.

  defaultValue: None
  position: "2"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: SubnetId
  isRequired: true
  description: |+
    Specifies an array of IDs of subnets from which this cmdlet gets routes.

  defaultValue: None
  pipelineInput: true
  position: "1"
  aliases: ""
  parameterValueGroup: ""
uid: NetworkController.Get-NetworkControllerFabricRoute
name: Get-NetworkControllerFabricRoute
description: |-
  The **Get-NetworkControllerFabricRoute** cmdlet gets a network route or all the routes in a specified logical subnet in the Network Controller.
  If you specify a route to get, this cmdlet gets the destination and next hop of the route.
  If you do not specify a route, this cmdlet returns all the routes in the logical subnet.
metadata:
  description: Use this topic to help manage Windows and Windows Server technologies with Windows PowerShell.
  external help file: Microsoft.NetworkController.Powershell.dll-help.xml
  Module Name: NetworkController
  ms.date: 12/20/2016
  online version: https://docs.microsoft.com/powershell/module/networkcontroller/get-networkcontrollerfabricroute?view=windowsserver2016-ps&wt.mc_id=ps-gethelp
  schema: 2.0.0
  title: Get-NetworkControllerFabricRoute
