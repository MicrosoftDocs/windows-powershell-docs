### YamlMime:PowershellCmdlet
summary: |-
  Creates a network controller application on top of the network controller cluster.
module: NetworkController
notes: ""
outputs:
- name: <xref href=" " data-throw-if-not-resolved="False" />
  description: |-
    This cmdlet returns an object that contains the following fields: 

    - Names of the network controller nodes
    - Authentication mode used between cluster nodes
    - Client security group
    - Client certificate thumbprints
    - Server certificate that is used for encryption of data between the network controller and REST and southbound clients.
    - REST IP address
    - Application version
links:
- text: Get-NetworkController
  href: ./Get-NetworkController.yml
- text: Set-NetworkController
  href: ./Set-NetworkController.yml
- text: Uninstall-NetworkController
  href: ./Uninstall-NetworkController.yml
- text: New-NetworkControllerNodeObject
  href: ./New-NetworkControllerNodeObject.yml
- text: Install-NetworkControllerCluster
  href: ./Install-NetworkControllerCluster.yml
syntaxes:
- >-
  Install-NetworkController -Node <NetworkControllerNode[]> -ClientAuthentication <ClientAuthentication>

   [-ClientCertificateThumbprint <String[]>] [-ClientSecurityGroup <String>]

   -ServerCertificate <X509Certificate2> [-RestIPAddress <String>] [-RestName <String>] [-Force]

   [-ComputerName <String>] [-UseSsl] [-Credential <PSCredential>] [-CertificateThumbprint <String>] [-WhatIf]

   [-Confirm] [<CommonParameters>]
examples:
- title: 'Example 1: Create a network controller in a test environment'
  code: |-
    PS C:\> $NodeObject = New-NetworkControllerNodeObject -Name "Node01" -Server "NCNode11" -FaultDomain "fd:/rack1/host1" -RestInterface Ethernet 
    PS C:\> $Certificate = Get-Item Cert:\LocalMachine\My | Get-ChildItem | where {$_.Subject -imatch "NCEncryption" }
    PS C:\> Install-NetworkControllerCluster -Node $NodeObject -ClusterAuthentication None 
    PS C:\> Install-NetworkController -Node $NodeObject -ClientAuthentication None -RestIpAddress "10.0.0.1/24" -ServerCertificate $Certificate 
    Node                            : {Node01}
    ClientAuthentication            : None
    ClientCertificateThumbprint     : 
    ClientSecurityGroup             : 
    ServerCertificate               : [Subject] 
                                       CN=NCEncryption

                                      [Issuer] 
                                        CN=Contoso

                                      [Serial Number] 
                                        1C00000003786A607D6EFB733F000000000003

                                      [Not Before] 
                                        2/11/2015 6:18:21 AM

                                      [Not After] 
                                        2/10/2017 6:18:21 AM

                                      [Thumbprint] 
                                        D4FDE4F607849083C590466334D66037C0E38001

    RestIPAddress                   : 10.0.0.1/24 
    Version                         : 10.0.0
  description: |-
    The first command creates a network controller node object, and then stores it in the $NodeObject variable.

    The second command gets a certificate named NCEncryption, and then stores it in the $Certificate variable.
    The command uses standard Windows PowerShellÂ® cmdlets.
    For more information, type `Get-Help Get-Item`, `Get-Help Get-ChildItem`, and `Get-Help Where`.

    The third command creates a network controller cluster by using the **Install-NetworkControllerCluster** cmdlet.
    The cluster contains the node object stored in $NodeObject.

    The final command deploys the network controller in a test environment.
    Since single node is used in the deployment, there is no high availability support.
    This network controller employs no authentication between the cluster nodes, or between the REST clients and network controller.
    The command specifies the $Certificate to encrypt the traffic between the REST clients and network controller.
  summary: ""
- title: 'Example 2: Create a network controller in a domain joined environment'
  code: |-
    PS C:\> $Node01 = New-NetworkControllerNodeObject -Name "Node01" -Server "NCNode01.Contoso.com" -FaultDomain "fd:/rack1/host1" -RestInterface Ethernet 
    PS C:\> $Node02 = New-NetworkControllerNodeObject -Name "Node02" -Server "NCNode02.Contoso.com" -FaultDomain "fd:/rack1/host2" -RestInterface Ethernet 
    PS C:\> $Node03 = New-NetworkControllerNodeObject -Name "Node03" -Server "NCNode03.Contoso.com" -FaultDomain "fd:/rack2/host3" -RestInterface Ethernet 
    PS C:\> $Certificate = Get-Item Cert:\LocalMachine\My | Get-ChildItem | where {$_.Subject -imatch "NCEncryption" }
    PS C:\> Install-NetworkControllerCluster -Node @($Node01,$Node02,$Node03) -ClusterAuthentication Kerberos -ManagementSecurityGroup "Contoso\NCManagementAdmins" -LogLocation "\\share\diagnostics" -CredentialEncryptionCertificate $Certificate 
    PS C:\> Install-NetworkController -Node @($Node01,$Node02,$Node03) -ClientAuthentication Kerberos -ClientSecurityGroup "Contoso\RestClients" -RestIpAddress "10.0.0.1/24" -StoreCertificate $Certificate -EnableAllLogs
    Node                            : {Node01, Node02, Node03}
    ClientAuthentication            : Kerberos
    ClientCertificateThumbprint     : 
    ClientSecurityGroup             : Contoso\RestClients
    ServerCertificate                  : [Subject] 
                                       CN=NCEncryption

                                      [Issuer] 
                                        CN=Contoso

                                      [Serial Number] 
                                        1C00000003786A607D6EFB733F000000000003

                                      [Not Before] 
                                        2/11/2015 6:18:21 AM

                                      [Not After] 
                                        2/10/2017 6:18:21 AM

                                      [Thumbprint] 
                                        D4FDE4F607849083C590466334D66037C0E38001

    RestIPAddress                   : 10.0.0.1/24 
    Version                         : 10.0.0
  description: |-
    The first three commands create network controller node objects, and then stores them in the $Node01, $Node02, and $Node03 variables.

    The fourth command gets a certificate named NCEncryption, and then stores it in the $Certificate variable.
    The command uses standard cmdlets.

    The fifth command creates a network controller cluster by using the **Install-NetworkControllerCluster** cmdlet.
    The cluster contains the node objects stored in the variables.

    The final command deploys the network controller in a domain joined environment.
    Network controller uses Kerberos authentication between the cluster nodes, and between the REST clients and network controller.
    Only clients that are part of the RestClients security group can communicate with the network controller.
    The certificate in $Certificate is used to encrypt traffic between the REST clients and network controller.
  summary: ""
parameters:
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: CertificateThumbprint
  description: |+
    Specifies the digital public key X.509 certificate of a user account that has permission to perform this action.
    Specify the certificate thumbprint of the certificate.
    Specify this parameter only if you run this cmdlet on a computer that is not part of the network controller cluster.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="ClientAuthentication" data-throw-if-not-resolved="False" />
  name: ClientAuthentication
  isRequired: true
  description: |+
    Specifies the type of authentication that network controller uses to communicate with representational state transfer (REST) clients.
    The acceptable values for this parameter are:

    - Kerberos
    - X509 
    - None 

    If the clients and network controller computers are domain joined, you should specify Kerberos authentication.
    Otherwise, specify X509 authentication.
    We do not recommend a value of None for production environments.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: None, Kerberos, X509
- type: <xref href="String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: ClientCertificateThumbprint
  description: |+
    Specifies an array of thumbprints of the certificates of REST clients that can communicate with the network controller.
    Specify this parameter only if the value of the *ClientAuthentication* parameter is X509.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: ClientSecurityGroup
  description: |+
    Specifies the security group that contains the name of the REST clients that can communicate with the network controller.
    Specify this parameter only if the value of the *ClientAuthentication* parameter is Kerberos.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: ComputerName
  description: |+
    Specifies the name of the network controller node on which this cmdlet operates.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet.

  defaultValue: "False"
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="PSCredential" data-throw-if-not-resolved="False" />
  name: Credential
  description: |+
    Specifies a user credential that has permission to perform this action.
    The default is the current user.
    Specify this parameter only if you run this cmdlet on a computer that is not part of the network controller cluster.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: Force
  description: |+
    Forces the command to run without asking for user confirmation.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="NetworkControllerNode" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Node
  isRequired: true
  description: |+
    Specifies an array of network controller nodes.
    You can create the node objects by using **New-NetworkControllerNodeObject** cmdlet.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: RestIPAddress
  description: |+
    Specifies the IP address on which network controller nodes communicate with the REST clients.
    This IP address must not be an existing IP address on any of the network controller nodes.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: RestName
  description: |+
    Specifies the DNS name of the Network Controller cluster.
    This must be specified if the Network Controller nodes are in different subnets.
    In this case, you must also enable dynamic registration of the RestName on the DNS servers.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="X509Certificate2" data-throw-if-not-resolved="False" />
  name: ServerCertificate
  isRequired: true
  description: |+
    Specifies the certificate to use to encrypt communication between the network controller and REST clients, as well as communication between the network controller and southbound clients.
    This certificate must have Server Authentication EKU and should be trusted by the REST clients.
    Also, the certificate subject name or subject alternative name (SAN) must resolve to the REST IP address in DNS

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: UseSsl
  description: |+
    Indicates that the remote computer uses the Secure Sockets Layer (SSL) protocol to establish a connection to the Network Controller node.
    The default value of this parameter is false.
    Specify this parameter only if you run this cmdlet on a computer that is not part of the network controller cluster.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the cmdlet runs.
    The cmdlet is not run.

  defaultValue: "False"
  position: Named
  aliases: wi
  parameterValueGroup: ""
uid: NetworkController.Install-NetworkController
name: Install-NetworkController
description: |-
  The **Install-NetworkController** cmdlet creates a network controller application on the network controller cluster.
  After you run this cmdlet, the network controller is running.

  The steps for configuring a network controller are as follows: 

  - Install the network controller role on all the computers that will be functioning as a network controller in your deployment.
  - From one of those computers (or any other remote computer), run the **New-NetworkControllerNodeObject** cmdlet to enter the details of the node to be part of the deployment.
  Repeat this step for all the computers that are part of the deployment.
  These node objects will be passed as a parameter to the next cmdlet. 
  - Run the **Install-NetworkControllerCluster** cmdlet to create a new network controller cluster.
  - Run the **Install-NetworkController** cmdlet to create the network controller application on top of the cluster.
metadata:
  description: Use this topic to help manage Windows and Windows Server technologies with Windows PowerShell.
  external help file: Microsoft.NetworkController.Powershell.dll-Help.xml
  Module Name: NetworkController
  ms.date: 12/20/2016
  online version: https://docs.microsoft.com/powershell/module/networkcontroller/install-networkcontroller?view=windowsserver2016-ps&wt.mc_id=ps-gethelp
  schema: 2.0.0
  title: Install-NetworkController
