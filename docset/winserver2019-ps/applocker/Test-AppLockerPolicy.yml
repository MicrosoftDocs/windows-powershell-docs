### YamlMime:PowershellCmdlet
summary: |-
  Specifies the AppLocker policy to determine whether the input files will be allowed to run for a given user.
module: AppLocker
notes: ""
inputs:
- name: <xref href="Microsoft.Security.ApplicationId.PolicyManagement.PolicyModel.AppLockerPolicy" data-throw-if-not-resolved="False" />
  description: |-
    **AppLockerPolicy**
outputs:
- name: <xref href="Microsoft.Security.ApplicationId.PolicyManagement.AppLockerPolicyDecision" data-throw-if-not-resolved="False" />
  description: ""
links:
- text: Get-AppLockerFileInformation
  href: ./Get-AppLockerFileInformation.yml
- text: Get-AppLockerPolicy
  href: ./Get-AppLockerPolicy.yml
- text: New-AppLockerPolicy
  href: ./New-AppLockerPolicy.yml
- text: Set-AppLockerPolicy
  href: ./Set-AppLockerPolicy.yml
syntaxes:
- >-
  Test-AppLockerPolicy [-XmlPolicy] <String> -Path <System.Collections.Generic.List`1[System.String]>

   [-User <String>]

   [-Filter <System.Collections.Generic.List`1[Microsoft.Security.ApplicationId.PolicyManagement.PolicyDecision]>]

   [<CommonParameters>]
- >-
  Test-AppLockerPolicy [-XmlPolicy] <String>

   -Packages <System.Collections.Generic.List`1[Microsoft.Windows.Appx.PackageManager.Commands.AppxPackage]>

   [-User <String>]

   [-Filter <System.Collections.Generic.List`1[Microsoft.Security.ApplicationId.PolicyManagement.PolicyDecision]>]

   [<CommonParameters>]
- >-
  Test-AppLockerPolicy [-PolicyObject] <AppLockerPolicy> -Path <System.Collections.Generic.List`1[System.String]>

   [-User <String>]

   [-Filter <System.Collections.Generic.List`1[Microsoft.Security.ApplicationId.PolicyManagement.PolicyDecision]>]

   [<CommonParameters>]
examples:
- title: 'Example 1: Report if programs are allowed to run'
  code: |-
    PS C:\> Test-AppLockerPolicy -XMLPolicy C:\Policy.xml -Path c:\windows\system32\calc.exe, C:\windows\system32\notepad.exe -User Everyone
  description: |-
    This example reports if calc.exe and notepad.exe will be allowed to run for Everyone under the policy specified by C:\Policy.xml.
  summary: ""
- title: 'Example 2: List executables specified by no policy'
  code: |-
    PS C:\> Get-ChildItem C:\windows\system32\*.exe | Test-AppLockerPolicy c:\Policy.xml -Filter DeniedByDefault
  description: |-
    This example lists the executables under C:\Windows\System32 that everyone will be denied by the policy specified by C:\Policy.xml because there is no explicit rule for the file.
  summary: ""
- title: 'Example 3: List executables specified by no policy to a text file'
  code: |-
    PS C:\> Get-AppLockerPolicy -Local | Test-AppLockerPolicy -Path C:\Windows\System32\*.exe -User contoso\saradavis -Filter Denied | Format-List -Property | Set-Content (ꞌC:\temp\DeniedFiles.txtꞌ)
  description: |-
    This example gets the local AppLocker policy, uses the policy to determine which executables in C:\Windows\System32 that contoso\saradavis is explicitly denied access to run, and then redirects the list to a text file.
  summary: ""
- title: 'Example 4: Lists packages and test against a policy'
  code: |-
    PS C:\> Get-AppxPackage -AllUsers | Test-AppLockerPolicy -XmlPolicy .\SamplePolicy.xml
  description: |-
    This example lists all the packages installed on this computer, for all the users, and tests them against a saved policy.
  summary: ""
parameters:
- type: <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="False" /><span>[</span><xref href="Microsoft.Security.ApplicationId.PolicyManagement.PolicyDecision" data-throw-if-not-resolved="False" /><span>]</span>
  name: Filter
  description: |+
    Specifies the policy decision by which to filter the output for each input file.
    The acceptable values for this parameter are: Allowed, Denied, DeniedByDefault, or AllowedByDefault.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: Allowed, AllowedByDefault, Denied, DeniedByDefault
- type: <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="False" /><span>[</span><xref href="Microsoft.Windows.Appx.PackageManager.Commands.AppxPackage" data-throw-if-not-resolved="False" /><span>]</span>
  name: Packages
  isRequired: true
  description: |+
    Specifies a list of installed packaged applications, from which the file information is retrieved.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="False" /><span>[</span><xref href="System.String" data-throw-if-not-resolved="False" /><span>]</span>
  name: Path
  isRequired: true
  description: |+
    Specifies the list of the file paths to test.
    Regular expressions are supported.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="AppLockerPolicy" data-throw-if-not-resolved="False" />
  name: PolicyObject
  isRequired: true
  description: |+
    Specifies the Applocker policy.
    Can be obtained from the Get-AppLockerPolicy or the New-AppLockerPolicy cmdlet.

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: User
  description: |+
    Defines the user or group to be used for testing the rules in a specified AppLocker policy.
    The acceptable values for this parameter are:

    - DNS user name (`domain\username`) 
    - User Principal Name (`username@domain.com`) 
    - SAM user name (`username`) 
    - Security identifier (`S-1-5-21-3165297888-301567370-576410423-1103`)

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: XmlPolicy
  isRequired: true
  description: |+
    Specifies the file path and name of the XML-formatted file that contains the AppLocker policy.

  defaultValue: None
  position: "0"
  aliases: ""
  parameterValueGroup: ""
uid: AppLocker.Test-AppLockerPolicy
name: Test-AppLockerPolicy
description: |-
  The **Test-AppLockerPolicy** cmdlet specifies the AppLocker policy to determine whether a list of files is allowed to run on the local computer for a specified user.

  To test AppLocker rules for a nested group, a representative member of the nested group should be specified for the *User* parameter.
  For example, a rule that allows the Everyone group to run calc.exe may not appear to apply correctly when the nested Finance group for the *User* parameter is specified.
  Instead, a representative member of the Finance group should be specified for the *User* parameter.
metadata:
  description: Use this topic to help manage Windows and Windows Server technologies with Windows PowerShell.
  external help file: Microsoft.Security.ApplicationId.PolicyManagement.Cmdlets.dll-Help.xml
  Module Name: AppLocker
  ms.date: 12/20/2016
  online version: https://docs.microsoft.com/powershell/module/applocker/test-applockerpolicy?view=windowsserver2019-ps&wt.mc_id=ps-gethelp
  schema: 2.0.0
  title: Test-AppLockerPolicy
