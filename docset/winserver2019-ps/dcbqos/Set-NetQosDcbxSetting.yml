### YamlMime:PowershellCmdlet
summary: |-
  Sets the data center bridging exchange settings.
module: DcbQoS
notes: ""
inputs:
- name: <xref href="None" data-throw-if-not-resolved="False" />
  description: ""
outputs:
- name: <xref href="Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetQosDcbxSettingData" data-throw-if-not-resolved="False" />
  description: |-
    The `Microsoft.Management.Infrastructure.CimInstance` object is a wrapper class that displays Windows Management Instrumentation (WMI) objects.
    The path after the pound sign (`#`) provides the namespace and class name for the underlying WMI object.
    This cmdlet returns a **MSFT_NetQosDcbxSettingData** object that contains the DCBX setting configured in Windows Server 2012 and later.
    Only if you specify the *PassThru* parameter does the command return the **MSFT_NetQosDcbxSettingData** object.
links:
- text: Get-NetQosDcbxSetting
  href: ./Get-NetQosDcbxSetting.yml
- text: Get-NetQosDcbxSetting
  href: ./Get-NetQosDcbxSetting.yml
syntaxes:
- >-
  Set-NetQosDcbxSetting [[-InterfaceAlias] <String>] -Willing <Boolean> [-CimSession <CimSession[]>]

   [-ThrottleLimit <Int32>] [-AsJob] [-PassThru] [-WhatIf] [-Confirm] [<CommonParameters>]
- >-
  Set-NetQosDcbxSetting [[-InterfaceIndex] <UInt32>] -Willing <Boolean> [-CimSession <CimSession[]>]

   [-ThrottleLimit <Int32>] [-AsJob] [-PassThru] [-WhatIf] [-Confirm] [<CommonParameters>]
- >-
  Set-NetQosDcbxSetting -InputObject <CimInstance[]> -Willing <Boolean> [-CimSession <CimSession[]>]

   [-ThrottleLimit <Int32>] [-AsJob] [-PassThru] [-WhatIf] [-Confirm] [<CommonParameters>]
examples:
- title: 'Example 1: Enable the DCBX willing state'
  code: |-
    PS C:\> Set-NetQosDcbxSetting -Willing $True
  description: |-
    This command enables the DCBX willing state, so that a DCB-capable network adapter is willing to accept configurations from a remote peer.
  summary: ""
parameters:
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: AsJob
  description: |+
    Runs the cmdlet as a background job. Use this parameter to run commands that take a long time to complete. 

    The cmdlet immediately returns an object that represents the job and then displays the command prompt. 
    You can continue to work in the session while the job completes. 
    To manage the job, use the `*-Job` cmdlets. 
    To get the job results, use the [Receive-Job](https://go.microsoft.com/fwlink/?LinkID=113372) cmdlet. 

    For more information about Windows PowerShell background jobs, see [about_Jobs](https://go.microsoft.com/fwlink/?LinkID=113251).

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="CimSession" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: CimSession
  description: |+
    Runs the cmdlet in a remote session or on a remote computer. 
    Enter a computer name or a session object, such as the output of a [New-CimSession](https://go.microsoft.com/fwlink/p/?LinkId=227967) or [Get-CimSession](https://go.microsoft.com/fwlink/p/?LinkId=227966) cmdlet. 
    The default is the current session on the local computer.

  defaultValue: None
  position: Named
  aliases: Session
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet.

  defaultValue: "False"
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="CimInstance" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: InputObject
  isRequired: true
  description: |+
    Specifies the input to this cmdlet. 
    You can use this parameter, or you can pipe the input to this cmdlet.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: InterfaceAlias
  description: ""
  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: IfAlias
  parameterValueGroup: ""
- type: <xref href="UInt32" data-throw-if-not-resolved="False" />
  name: InterfaceIndex
  description: ""
  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: IfIndex
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: PassThru
  description: |+
    Returns an object representing the item with which you are working.
    By default, this cmdlet does not generate any output.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="Int32" data-throw-if-not-resolved="False" />
  name: ThrottleLimit
  description: |+
    Specifies the maximum number of concurrent operations that can be established to run the cmdlet.
    If this parameter is omitted or a value of `0` is entered, then Windows PowerShell® calculates an optimum throttle limit for the cmdlet based on the number of CIM cmdlets that are running on the computer.
    The throttle limit applies only to the current cmdlet, not to the session or to the computer.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the cmdlet runs.
    The cmdlet is not run.

  defaultValue: "False"
  position: Named
  aliases: wi
  parameterValueGroup: ""
- type: <xref href="Boolean" data-throw-if-not-resolved="False" />
  name: Willing
  isRequired: true
  description: |+
    Specifies whether a DCB-capable network adapter accepts the configuration from a remote peer by using the DCBX protocol.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
uid: DcbQoS.Set-NetQosDcbxSetting
name: Set-NetQosDcbxSetting
description: |-
  The **Set-NetQosDcbxSetting** cmdlet sets the data center bridging exchange (DCBX) settings.
  The only setting that Windows Server® 2012 and later allows a user to set is that the network adapters in computers that run Windows Server 2012 and later accept data center bridging (DCB) configurations from Windows Server 2012 and later or from a remote device by using the DCBX protocol, which is specified in the IEEE data center bridging (DCB) standard.

  If the *Willing* parameter is set to $True, Windows Server 2012 or later does not send priority-based flow control (PFC) and traffic class settings to DCB-capable network adapters in the computer.
  If the *Willing* parameter is set to $False, Windows Server 2012 or later sends the settings to the network adapters.
metadata:
  description: Use this topic to help manage Windows and Windows Server technologies with Windows PowerShell.
  external help file: MSFT_NetQosDcbxSetting.cdxml-help.xml
  Module Name: DcbQoS
  ms.date: 12/27/2016
  online version: https://docs.microsoft.com/powershell/module/dcbqos/set-netqosdcbxsetting?view=windowsserver2019-ps&wt.mc_id=ps-gethelp
  schema: 2.0.0
  title: Set-NetQosDcbxSetting
