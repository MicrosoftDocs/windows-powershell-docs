### YamlMime:PowershellCmdlet
summary: |-
  Creates or Updates a server resource in the Network Controller
module: NetworkController
notes: ""
inputs:
- name: <xref href="ServerProperties" data-throw-if-not-resolved="False" />
  description: |-
    You can pipe an object to this cmdlet that contains the following properties: 

    - Connections that specifies the information that is required to connect to the server for the purposes of managing it.
    Each connection has a management address and a credential reference to connect to the server. 
    - Model number. 
    - Array of physical network interfaces on the server. 
    - Operating system that runs on the server. 
    - Slot in the rack in which the server is connected. 
    - Serial number. 
    - Server vendor name.
links:
- text: Get-NetworkControllerCredential
  href: ./Get-NetworkControllerCredential.yml
- text: Get-NetworkControllerServer
  href: ./Get-NetworkControllerServer.yml
- text: Install-NetworkController
  href: ./Install-NetworkController.yml
- text: New-NetworkControllerCredential
  href: ./New-NetworkControllerCredential.yml
- text: Remove-NetworkControllerServer
  href: ./Remove-NetworkControllerServer.yml
- text: Set-NetworkController
  href: ./Set-NetworkController.yml
syntaxes:
- >-
  New-NetworkControllerServer [-ResourceId] <String> [[-Tags] <PSObject>] [-Properties] <ServerProperties>

   [[-Etag] <String>] [[-ResourceMetadata] <ResourceMetadata>] [-Force] -ConnectionUri <Uri>

   [-CertificateThumbprint <String>] [-Credential <PSCredential>] [-PassInnerException] [-WhatIf] [-Confirm]

   [<CommonParameters>]
examples:
- title: 'Example 1: Add a server'
  code: |-
    PS C:\> $CredentialProperties = [Microsoft.Windows.NetworkController.CredentialProperties]@{Type="UsernamePassword";UserName="admin";Value="password"}
    PS C:\> New-NetworkControllerCredential -ResourceId "Credential01" -ConnectionUri "https://restserver" -Properties $CredentialProperties
    PS C:\> $Credential = Get-NetworkControllerCredential -ResourceId "Credential01" -ConnectionUri "https://restserver"
    PS C:\> $ServerProperties = New-Object Microsoft.Windows.NetworkController.ServerProperties
    PS C:\> $ServerProperties.Connections = @([Microsoft.Windows.NetworkController.Connection]@{ManagementAddresses=@("192.168.0.12");Credential=$Credential})
    PS C:\> $ServerProperties.RackSlot = "1"
    PS C:\> $ServerProperties.OS = "Windows Server 2016"
    PS C:\> $ServerProperties.Vendor = "Dell"
    PS C:\> $ServerProperties.Model = "PowerEdge R730"
    PS C:\> New-NetworkControllerServer -ConnectionUri "https://networkcontroller" -ResourceId "Server01" -Properties $ServerProperties
  description: |-
    The first command creates a **CredentialProperties** object, and then stores it in the $CredentialProperties variable.

    The second command creates a credential that has the properties in $CredentialProperties by using the **New-NetworkControllerCredential** cmdlet.

    The third command gets the credential by using the **Get-NetworkControllerCredential** cmdlet, and then stores it in the $Credential variable.

    The fourth command creates a **ServerProperties** object by using the **New-Object** cmdlet.
    The command stores the object in the $ServerProperties variable.

    The next five commands assign values to properties of $ServerProperties.

    The final command adds a server to the Network Controller that has the resource ID Server01.
    The command identifies the Network Controller by URI.
    The command specifies the properties of the server by using $ServerProperties.
  summary: ""
parameters:
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: CertificateThumbprint
  description: |+
    Specifies the certificate thumbprint of a digital public key X.509 certificate of a user account that has permission to perform this action.
    In order for Network Controller to authorize the account, specify this thumbprint by using the *ClientCertificateThumbprint* parameter of the **Install-NetworkController** or **Set-NetworkController** cmdlet.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet.

  defaultValue: "False"
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="Uri" data-throw-if-not-resolved="False" />
  name: ConnectionUri
  isRequired: true
  description: |+
    Specifies the Uniform Resource Identifier (URI) of the Network Controller.
    All Representational State Transfer (REST) clients use this URI to connect to Network Controller.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="PSCredential" data-throw-if-not-resolved="False" />
  name: Credential
  description: |+
    Specifies a user credential that has permission to perform this action.
    The default value is the current user.
    This user must be present in the security group specified in the *ClientSecurityGroup* parameter in **Install-NetworkController**.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: Etag
  description: |+
    Specifies the entity tag (ETag) parameter of the resource.
    An ETag is an HTTP response header returned by an HTTP-compliant web server.
    An ETag is used to determine change in the content of a resource.
    The value of the header is an opaque string that represents the state of the resource when the response was generated.

  defaultValue: None
  position: "5"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: Force
  description: |+
    Forces the command to run without asking for user confirmation.

  defaultValue: None
  position: "7"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: PassInnerException
  description: ""
  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="ServerProperties" data-throw-if-not-resolved="False" />
  name: Properties
  isRequired: true
  description: |+
    Specifies the properties of a server that this cmdlet creates or updates.
    You can specify the following properties: 

    - Connections that specifies the information that is required to connect to the server for the purposes of managing it.
    Each connection has a management address and a credential reference to connect to the server. 
    - Model number. 
    - Array of physical network interfaces on the server. 
    - Operating system that runs on the server. 
    - Slot in the rack in which the server is connected. 
    - Serial number. 
    - Server vendor name.

  defaultValue: None
  pipelineInput: true
  position: "3"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: ResourceId
  isRequired: true
  description: |+
    Specifies the resource ID of the server that this cmdlet creates or modifies.

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="ResourceMetadata" data-throw-if-not-resolved="False" />
  name: ResourceMetadata
  description: |+
    Specifies the resource ID of the server interface that this cmdlet adds or updates.

  defaultValue: None
  position: "6"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="PSObject" data-throw-if-not-resolved="False" />
  name: Tags
  description: ""
  defaultValue: None
  position: "1"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the cmdlet runs.
    The cmdlet is not run.

  defaultValue: "False"
  position: Named
  aliases: wi
  parameterValueGroup: ""
uid: NetworkController.New-NetworkControllerServer
name: New-NetworkControllerServer
description: |-
  The **New-NetworkControllerServer** cmdlet creates updates a physical server resource in the Network Controller, or updates an existing one.
  After you add the server resource, Network Controller manages that server.
metadata:
  description: Use this topic to help manage Windows and Windows Server technologies with Windows PowerShell.
  external help file: Microsoft.NetworkController.Powershell.dll-help.xml
  Module Name: NetworkController
  ms.date: 12/20/2016
  online version: https://docs.microsoft.com/powershell/module/networkcontroller/new-networkcontrollerserver?view=windowsserver2019-ps&wt.mc_id=ps-gethelp
  schema: 2.0.0
  title: New-NetworkControllerServer
