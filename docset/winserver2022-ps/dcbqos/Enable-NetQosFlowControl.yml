### YamlMime:PowershellCmdlet
summary: |-
  Enables link level flow control based on the IEEE 802.1p priority.
module: DcbQoS
notes: ""
inputs:
- name: <xref href="Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetQosFlowControlSettingData" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  description: |-
    The `Microsoft.Management.Infrastructure.CimInstance` object is a wrapper class that displays Windows Management Instrumentation (WMI) objects.
    The path after the pound sign (`#`) provides the namespace and class name for the underlying WMI object.
    You can pipe a **MSFT_NetQosFlowControlSettingData** object that contains the follow control setting per priority to this cmdlet.
outputs:
- name: <xref href="Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetQosFlowControlSettingData" data-throw-if-not-resolved="False" />
  description: |-
    The `Microsoft.Management.Infrastructure.CimInstance` object is a wrapper class that displays Windows Management Instrumentation (WMI) objects.
    The path after the pound sign (`#`) provides the namespace and class name for the underlying WMI object.
    This cmdlet returns a **MSFT_NetQosFlowControlSettingData** object that contains flow control settings per priority.
    Only if you specify the *PassThru* parameter does this cmdlet return the **MSFT_NetQosFlowControlSettingData** object.
links:
- text: Disable-NetQosFlowControl
  href: ./Disable-NetQosFlowControl.yml
- text: Get-NetQosFlowControl
  href: ./Get-NetQosFlowControl.yml
- text: Set-NetQosDcbxSetting
  href: ./Set-NetQosDcbxSetting.yml
- text: Set-NetQosFlowControl
  href: ./Set-NetQosFlowControl.yml
syntaxes:
- >-
  Enable-NetQosFlowControl [[-Priority] <Byte[]>] [[-InterfaceAlias] <String>] [-PassThru]

   [-CimSession <CimSession[]>] [-ThrottleLimit <Int32>] [-AsJob] [-WhatIf] [-Confirm] [<CommonParameters>]
- >-
  Enable-NetQosFlowControl [[-Priority] <Byte[]>] [[-InterfaceIndex] <UInt32>] [-PassThru]

   [-CimSession <CimSession[]>] [-ThrottleLimit <Int32>] [-AsJob] [-WhatIf] [-Confirm] [<CommonParameters>]
- >-
  Enable-NetQosFlowControl -InputObject <CimInstance[]> [-PassThru] [-CimSession <CimSession[]>]

   [-ThrottleLimit <Int32>] [-AsJob] [-WhatIf] [-Confirm] [<CommonParameters>]
examples:
- title: 'Example 1: Enable flow control for traffic by priority'
  code: |-
    PS C:\> Enable-NetQosFlowControl -Priority 3,6
  description: |-
    This command enables flow control on traffic tagged with priority 3 and priority 6.
  summary: ""
parameters:
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: AsJob
  description: |+
    Runs the cmdlet as a background job. Use this parameter to run commands that take a long time to complete. 

    The cmdlet immediately returns an object that represents the job and then displays the command prompt. 
    You can continue to work in the session while the job completes. 
    To manage the job, use the `*-Job` cmdlets. 
    To get the job results, use the [Receive-Job](https://go.microsoft.com/fwlink/?LinkID=113372) cmdlet. 

    For more information about Windows PowerShell background jobs, see [about_Jobs](https://go.microsoft.com/fwlink/?LinkID=113251).

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="CimSession" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: CimSession
  description: |+
    Runs the cmdlet in a remote session or on a remote computer. 
    Enter a computer name or a session object, such as the output of a [New-CimSession](https://go.microsoft.com/fwlink/p/?LinkId=227967) or [Get-CimSession](https://go.microsoft.com/fwlink/p/?LinkId=227966) cmdlet. 
    The default is the current session on the local computer.

  defaultValue: None
  position: Named
  aliases: Session
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet.

  defaultValue: "False"
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="CimInstance" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: InputObject
  isRequired: true
  description: |+
    Specifies the input to this cmdlet. 
    You can use this parameter, or you can pipe the input to this cmdlet.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: InterfaceAlias
  description: ""
  defaultValue: None
  pipelineInput: true
  position: "1"
  aliases: IfAlias
  parameterValueGroup: ""
- type: <xref href="UInt32" data-throw-if-not-resolved="False" />
  name: InterfaceIndex
  description: ""
  defaultValue: None
  pipelineInput: true
  position: "1"
  aliases: IfIndex
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: PassThru
  description: ""
  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="Byte" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: Priority
  description: ""
  defaultValue: None
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="Int32" data-throw-if-not-resolved="False" />
  name: ThrottleLimit
  description: ""
  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the cmdlet runs.
    The cmdlet is not run.

  defaultValue: "False"
  position: Named
  aliases: wi
  parameterValueGroup: ""
uid: DcbQoS.Enable-NetQosFlowControl
name: Enable-NetQosFlowControl
description: |-
  The **Enable-NetQosFlowControl** cmdlet enables priority-based flow control (PFC) in Windows ServerÂ® 2012 and later.
  PFC is part of the IEEE data center bridging (DCB) standard.
  If Windows Server 2012 or later is configured to be **not willing** to accept configurations from a remote device, Windows Server 2012 or later programs DCB capable NICs, which enables PFC at the link level.

  For more information about remote device configurations, see the **Set-NetQosDcbxSetting** cmdlet.

  Enabling flow control on both ends of a link reduces the chance of packet loss because of link congestion.
  Some upper layer protocol even assumes a lossless underlying protocol.
  In such case, make sure that you enable flow control.
  PFC makes it possible to enable flow control just for one type of traffic, denoted by the IEEE 802.1p priority.
  It is very important to have consistent PFC settings on both ends of the link.
  A mis-matched configuration is equivalent to not having flow control at all.
metadata:
  description: Use this topic to help manage Windows and Windows Server technologies with Windows PowerShell.
  external help file: MSFT_NetQosFlowControl.cdxml-help.xml
  Module Name: DcbQoS
  ms.date: 12/27/2016
  online version: https://docs.microsoft.com/powershell/module/dcbqos/enable-netqosflowcontrol?view=windowsserver2022-ps&wt.mc_id=ps-gethelp
  schema: 2.0.0
  title: Enable-NetQosFlowControl
