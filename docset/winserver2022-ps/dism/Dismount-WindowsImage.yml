### YamlMime:PowershellCmdlet
summary: |-
  Dismounts a Windows image from the directory it is mapped to.
module: DISM
notes: ""
inputs:
- name: <xref href="System.String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  description: ""
- name: <xref href="Microsoft.Dism.Commands.ImageObject" data-throw-if-not-resolved="False" />
  description: ""
- name: <xref href="Microsoft.Dism.Commands.MountedImageInfoObject" data-throw-if-not-resolved="False" />
  description: ""
- name: <xref href="Microsoft.Dism.Commands.ImageInfoObject" data-throw-if-not-resolved="False" />
  description: ""
outputs:
- name: <xref href="Microsoft.Dism.Commands.BaseDismObject" data-throw-if-not-resolved="False" />
  description: ""
links:
- text: Save-WindowsImage
  href: ./Save-WindowsImage.yml
- text: Repair-WindowsImage
  href: ./Repair-WindowsImage.yml
- text: Mount-WindowsImage
  href: ./Mount-WindowsImage.yml
- text: Get-WindowsImage
  href: ./Get-WindowsImage.yml
syntaxes:
- >-
  Dismount-WindowsImage -Path <String> [-Discard] [-LogPath <String>] [-ScratchDirectory <String>]

   [-LogLevel <LogLevel>] [<CommonParameters>]
- >-
  Dismount-WindowsImage -Path <String> [-Save] [-CheckIntegrity] [-Append] [-LogPath <String>]

   [-ScratchDirectory <String>] [-LogLevel <LogLevel>] [<CommonParameters>]
examples:
- title: 'Example 1: Dismount an operating system image'
  code: |-
    PS C:\> Dismount-WindowsImage -Path "c:\offline" -Save
  description: |-
    This command dismounts the Windows Image mapped to c:\offline and saves any changes that were made while servicing the image.
  summary: ""
parameters:
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: Append
  description: |+
    Specifies the location of an existing .wim file to add the Windows image to when you dismount it instead of overwriting the existing image.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: CheckIntegrity
  description: |+
    Detects and tracks .wim file corruption.
    *CheckIntegrity* stops the operation if DISM detects that the .wim file is corrupted when used with the **Mount-WindowsImage** cmdlet.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: Discard
  isRequired: true
  description: |+
    Discards the changes to a Windows image.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="LogLevel" data-throw-if-not-resolved="False" />
  name: LogLevel
  description: |+
    Specifies the maximum output level shown in the logs.
    The default log level is 3.
    The accepted values are as follows:
    - 1 = Errors only
    - 2 = Errors and warnings
    - 3 = Errors, warnings, and information
    - 4 = All of the information listed previously, plus debug output

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: LL
  parameterValueGroup: Errors, Warnings, WarningsInfo
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: LogPath
  description: |+
    Specifies the full path and file name to log to.
    If not set, the default is `%WINDIR%\Logs\Dism\dism.log`.
    In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB.
    The log file will automatically be archived.
    The archived log file will be saved with .bak appended to the file name and a new log file will be generated.
    Each time the log file is archived the .bak file will be overwritten. 
    When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: LP
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: Path
  isRequired: true
  description: |+
    Specifies the full path to the root directory of the offline Windows image that you will service.
    If the directory named Windows is not a subdirectory of the root directory, *WindowsDirectory* must be specified.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: Save
  isRequired: true
  description: |+
    Saves the changes to a Windows image.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: ScratchDirectory
  description: |+
    Specifies a temporary directory that will be used when extracting files for use during servicing.
    The directory must exist locally.
    If not specified, the `\Windows\%Temp%` directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM.
    Items in the scratch directory are deleted after each operation. 
    You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation.
    The directory used for extracting files for temporary usage during servicing should be a local directory.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
uid: DISM.Dismount-WindowsImage
name: Dismount-WindowsImage
description: |-
  The **Dismount-WindowsImage** cmdlet either saves or discards the changes to a Windows image and then dismounts the image.

  The *Path* parameter specifies the location of the mounted Windows image.

  The *Append* parameter specifies the location of an existing .wim file to add the Windows image to when you dismount it instead of overwriting the existing image.

  The *CheckIntegrity* parameter detects and tracks .wim file corruption.
  CheckIntegrity stops the operation if DISM detects that the .wim file is corrupted when used with the **Mount-WindowsImage** cmdlet.

  The *CheckIntegrity* and *Append* parameters do not apply to virtual hard disk (VHD) files.
metadata:
  description: Use this topic to help manage Windows and Windows Server technologies with Windows PowerShell.
  external help file: Microsoft.Dism.PowerShell.dll-Help.xml
  Module Name: System.Object[]
  ms.date: 12/21/2016
  online version: https://docs.microsoft.com/powershell/module/dism/dismount-windowsimage?view=windowsserver2022-ps&wt.mc_id=ps-gethelp
  schema: 2.0.0
  title: Dismount-WindowsImage
