### YamlMime:PowershellCmdlet
summary: |-
  Creates a peering between two virtual networks to enable connectivity between them.
module: NetworkController
notes: ""
inputs:
- name: <xref href="System.String" data-throw-if-not-resolved="False" />
  description: ""
- name: <xref href="Microsoft.Windows.NetworkController.VirtualNetworkPeeringProperties" data-throw-if-not-resolved="False" />
  description: ""
outputs:
- name: <xref href="System.Object" data-throw-if-not-resolved="False" />
  description: ""
links:
- text: Get-NetworkControllerVirtualNetwork
  href: Get-NetworkControllerVirtualNetwork.yml
- text: Get-NetworkControllerVirtualNetworkPeering
  href: Get-NetworkControllerVirtualNetworkPeering.yml
- text: Remove-NetworkControllerVirtualNetworkPeering
  href: Remove-NetworkControllerVirtualNetworkPeering.yml
syntaxes:
- >-
  New-NetworkControllerVirtualNetworkPeering [-VirtualNetworkId] <String> [-ResourceId] <String>

   [-Properties] <VirtualNetworkPeeringProperties> [[-ResourceMetadata] <ResourceMetadata>] [[-Etag] <String>]

   [-Force] -ConnectionUri <Uri> [-CertificateThumbprint <String>] [-Credential <PSCredential>]

   [-PassInnerException] [-WhatIf] [-Confirm] [<CommonParameters>]
examples:
- title: 'Example 1: Create a virtual network peering'
  code: |-
    $peeringProperties = New-Object Microsoft.Windows.NetworkController.VirtualNetworkPeeringProperties
    $peeringProperties.remoteVirtualNetwork = Get-NetworkControllerVirtualNetwork -ConnectionUri "https://woodgrove01" -ResourceId "Woodgrove_VNet1"
    New-NetworkControllerVirtualNetworkPeering -VirtualNetworkId "Contoso_VNet1" -ResourceId "ContosotoWoodgrove" -Properties $peeringProperties -ConnectionUri "https://woodgrove01"
  description: |-
    This example creates a virtual network peering between subnets that belong to two fictional companies, Contoso and Woodgrove.

    The first command creates a properties object for the virtual network peering.

    The second command adds the virtual network for the Woodgrove company.

    The final command creates the peering for the Contoso company side.
    It uses the properties object that specifies the Woodgrove side.

    This example sets up only the peering for the Contoso side of the peering.
    A similar set of commands needs to be run for the Woodgrove side.
  summary: ""
parameters:
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: CertificateThumbprint
  description: |+
    Specifies the digital public key X.509 certificate of a user account that has permission to perform this action.
    Specify this parameter only if you run this cmdlet on a computer that is not part of the network controller cluster.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet.

  defaultValue: None
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="Uri" data-throw-if-not-resolved="False" />
  name: ConnectionUri
  isRequired: true
  description: |+
    Specifies the Uniform Resource Identifier (URI) of a Network Controller.
    The cmdlet creates a virtual network peering for that controller.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="PSCredential" data-throw-if-not-resolved="False" />
  name: Credential
  description: |+
    Specifies a user credential that has permission to perform this action.
    The default value is the current user.

    This user must be present in the security group provided in the **ClientSecurityGroup** parameter in the `Install-NetworkController` cmdlet.
    Specify this parameter only if you run this cmdlet on a computer that is not part of the network controller cluster.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: Etag
  description: |+
    Specifies the entity tag (ETag) parameter of the resource.
    An ETag is an HTTP response header returned by an HTTP-compliant web server used to determine change in the content of a resource at a given URL.
    The value of the header is an opaque string representing the state of the resource at the time the response was generated.

  defaultValue: None
  position: "7"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: Force
  description: |+
    Forces the command to run without asking for user confirmation.

  defaultValue: None
  position: "8"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: PassInnerException
  description: |+
    This thumbprint must also be provided in the **ClientCertificateThumbprint** parameter in the **Install-NetworkController** or **Set-NetworkController** cmdlet so that Network Controller can authorize this user.

    The thumbprint must be provided only if the network controller client authentication is X509 certificates.
    **Get-NetworkController** retrieves that client authentication and authorization information.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="VirtualNetworkPeeringProperties" data-throw-if-not-resolved="False" />
  name: Properties
  isRequired: true
  description: |+
    Specifies the properties of the virtual network peering.

  defaultValue: None
  pipelineInput: true
  position: "4"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: ResourceId
  isRequired: true
  description: |+
    Specifies the resource ID of the virtual network peering to create.

  defaultValue: None
  pipelineInput: true
  position: "2"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="ResourceMetadata" data-throw-if-not-resolved="False" />
  name: ResourceMetadata
  description: |+
    Specifies metadata information for the client, such as the tenant ID, group ID, and resource name.

  defaultValue: None
  position: "5"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: VirtualNetworkId
  isRequired: true
  description: |+
    Specified the ID of a virtual network.
    This cmdlet creates a peering for that network.

  defaultValue: None
  pipelineInput: true
  position: "1"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the cmdlet runs.
    The cmdlet is not run.

  defaultValue: None
  position: Named
  aliases: wi
  parameterValueGroup: ""
uid: NetworkController.New-NetworkControllerVirtualNetworkPeering
name: New-NetworkControllerVirtualNetworkPeering
description: |-
  The **New-NetworkControllerVirtualNetworkPeering** cmdlet creates a peering between two virtual networks to enable connectivity between them.
metadata:
  description: The New-NetworkControllerVirtualNetworkPeering cmdlet configures a peering between two virtual networks to enable connectivity between them.
  external help file: Microsoft.NetworkController.Powershell.dll-help.xml
  Module Name: NetworkController
  ms.date: 09/27/2021
  online version: https://learn.microsoft.com/powershell/module/networkcontroller/new-networkcontrollervirtualnetworkpeering?view=windowsserver2022-ps&wt.mc_id=ps-gethelp
  schema: 2.0.0
  title: New-NetworkControllerVirtualNetworkPeering
